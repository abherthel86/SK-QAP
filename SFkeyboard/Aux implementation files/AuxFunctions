void qwertyEnAssign (Gendata *data, Keyboard *keyb);
void qwertyItAssign (Gendata *data, Keyboard *keyb);
void qwertyPtAssign (Gendata *data, Keyboard *keyb);
void azertyAssign (Gendata *data, Keyboard *keyb);
void qwertynAssign (Gendata *data, Keyboard *keyb);

void optAssign (Gendata *data, Keyboard *keyb);
void newItInst(Gendata *data, Keyboard *keyb);
void newFrInst(Gendata *data, Keyboard *keyb);
void newSpInst(Gendata *data, Keyboard *keyb);
void newPtInst(Gendata *data, Keyboard *keyb);
long long qwertyItCalc (Gendata *data, Keyboard *keyb);
long long qwertyPtCalc (Gendata *data, Keyboard *keyb);
long long qwertynCalc (Gendata *data, Keyboard *keyb);
long long azertyCalc (Gendata *data, Keyboard *keyb);

void hybEng (Gendata *data, Keyboard *keyb);
void hybIt(Gendata *data, Keyboard *keyb);
void hybPt(Gendata *data, Keyboard *keyb);
void hybSp(Gendata *data, Keyboard *keyb);
void hybFr(Gendata *data, Keyboard *keyb);

void hybENFR (Gendata *data, Keyboard *keyb);
void hybENSP(Gendata *data, Keyboard *keyb);
void hybENPT(Gendata *data, Keyboard *keyb);
void hybENIT(Gendata *data, Keyboard *keyb);

void PtInstAdj(Gendata *data);

void qwertyEnAssign (Gendata *data, Keyboard *keyb){
//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
//T H E O F A N D I W S  R  Y  U  B  C  V  M  L  P  K  G  J  Q  X  Z  _
//Original QWERTY
	keyb->kcols = 10;
	keyb->krows = 4;

	keyb->grid = new int [keyb->ksize];

	for (int i = 0; i < keyb->ksize; i++){
		keyb->grid[i] = -1;
	}
	
	keyb->assignment = new int [data->size];

	for (int i = 0; i < data->size; i++){
		keyb->assignment[i] = -1;
	}

	keyb->grid[0] = 23;
	keyb->grid[1] = 9;
	keyb->grid[2] = 2;
	keyb->grid[3] = 11;
	keyb->grid[4] = 0;
	keyb->grid[5] = 12;
	keyb->grid[6] = 13;
	keyb->grid[7] = 8;
	keyb->grid[8] = 3;
	keyb->grid[9] = 19;
	keyb->grid[10] = -1;
	keyb->grid[11] = 5;
	keyb->grid[12] = 10;
	keyb->grid[13] = 7;
	keyb->grid[14] = 4;
	keyb->grid[15] = 21;
	keyb->grid[16] = 1;
	keyb->grid[17] = 22;
	keyb->grid[18] = 20;
	keyb->grid[19] = 18;
	keyb->grid[20] = -1;
	keyb->grid[21] = -1;
	keyb->grid[22] = 25;
	keyb->grid[23] = 24;
	keyb->grid[24] = 15;
	keyb->grid[25] = 16;
	keyb->grid[26] = 14;
	keyb->grid[27] = 6;
	keyb->grid[28] = 17;
	keyb->grid[29] = -1;
	keyb->grid[30] = -1;
	keyb->grid[31] = -1;
	keyb->grid[32] = -1;
	keyb->grid[33] = 26;
	keyb->grid[34] = 27;
	keyb->grid[35] = 28;
	keyb->grid[36] = 29;
	keyb->grid[37] = 30;
	keyb->grid[38] = -1;
	keyb->grid[39] = -1;	

	keyb->assignment[0] = 4;
	keyb->assignment[1] = 16;
	keyb->assignment[2] = 2;
	keyb->assignment[3] = 8;
	keyb->assignment[4] = 14;
	keyb->assignment[5] = 11;
	keyb->assignment[6] = 27;
	keyb->assignment[7] = 13;
	keyb->assignment[8] = 7;
	keyb->assignment[9] = 1;
	keyb->assignment[10] = 12;
	keyb->assignment[11] = 3;
	keyb->assignment[12] = 5;
	keyb->assignment[13] = 6;
	keyb->assignment[14] = 26;
	keyb->assignment[15] = 24;
	keyb->assignment[16] = 25;
	keyb->assignment[17] = 28;
	keyb->assignment[18] = 19;
	keyb->assignment[19] = 9;
	keyb->assignment[20] = 18;
	keyb->assignment[21] = 15;
	keyb->assignment[22] = 17;
	keyb->assignment[23] = 0;
	keyb->assignment[24] = 23;
	keyb->assignment[25] = 22;
	keyb->assignment[26] = 33;
	keyb->assignment[27] = 34;
	keyb->assignment[28] = 35;
	keyb->assignment[29] = 36;
	keyb->assignment[30] = 37;

	int count = 0;
	
	for (int i = 0; i < keyb->krows; i++){
		for (int j = 0; j < keyb->kcols; j++){
			if (i == 0 && j == 0){
				cout << " ";
			}
			if (keyb->grid[count] != -1)
				cout << setw(3) << data->char_list[keyb->grid[count]];
			else
				cout<< setw(3) << "*";
			count++;
		}
		cout << endl;
	}
}

void qwertyItAssign (Gendata *data, Keyboard *keyb){
// //0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
// //E C H I L A N U P R  O  D  S  M  G  Q  T  V  F  Z  B  X  W  Y  K  J  _  _  _  _  _
	
// 	keyb->kcols = 10;
// 	keyb->krows = 4;

// 	keyb->grid = new int [keyb->ksize];

// 	for (int i = 0; i < keyb->ksize; i++){
// 		keyb->grid[i] = -1;
// 	}
	
// 	keyb->assignment = new int [data->size];

// 	for (int i = 0; i < data->size; i++){
// 		keyb->assignment[i] = -1;
// 	}

// 	keyb->grid[0] = 15;
// 	keyb->grid[1] = 22;
// 	keyb->grid[2] = 0;
// 	keyb->grid[3] = 9;
// 	keyb->grid[4] = 16;
// 	keyb->grid[5] = 23;
// 	keyb->grid[6] = 7;
// 	keyb->grid[7] = 3;
// 	keyb->grid[8] = 10;
// 	keyb->grid[9] = 8;
// 	keyb->grid[11] = 5;
// 	keyb->grid[12] = 12;
// 	keyb->grid[13] = 11;
// 	keyb->grid[14] = 18;
// 	keyb->grid[15] = 14;
// 	keyb->grid[16] = 2;
// 	keyb->grid[17] = 25;
// 	keyb->grid[18] = 24;
// 	keyb->grid[19] = 4;
// 	keyb->grid[22] = 19;
// 	keyb->grid[23] = 21;
// 	keyb->grid[24] = 1;
// 	keyb->grid[25] = 17;
// 	keyb->grid[26] = 20;
// 	keyb->grid[27] = 6;
// 	keyb->grid[28] = 13;
// 	keyb->grid[33] = 26;
// 	keyb->grid[34] = 27;
// 	keyb->grid[35] = 28;
// 	keyb->grid[36] = 29;
// 	keyb->grid[37] = 30;

// 	keyb->assignment[0] = 2;
// 	keyb->assignment[1] = 24;
// 	keyb->assignment[2] = 16;
// 	keyb->assignment[3] = 7;
// 	keyb->assignment[4] = 19;
// 	keyb->assignment[5] = 11;
// 	keyb->assignment[6] = 27;
// 	keyb->assignment[7] = 6;
// 	keyb->assignment[8] = 9;
// 	keyb->assignment[9] = 3;
// 	keyb->assignment[10] = 8;
// 	keyb->assignment[11] = 13;
// 	keyb->assignment[12] = 12;
// 	keyb->assignment[13] = 28;
// 	keyb->assignment[14] = 15;
// 	keyb->assignment[15] = 0;
// 	keyb->assignment[16] = 4;
// 	keyb->assignment[17] = 25;
// 	keyb->assignment[18] = 14;
// 	keyb->assignment[19] = 22;
// 	keyb->assignment[20] = 26;
// 	keyb->assignment[21] = 23;
// 	keyb->assignment[22] = 1;
// 	keyb->assignment[23] = 5;
// 	keyb->assignment[24] = 18;
// 	keyb->assignment[25] = 17;
// 	keyb->assignment[26] = 33;
// 	keyb->assignment[27] = 34;
// 	keyb->assignment[28] = 35;
// 	keyb->assignment[29] = 36;
// 	keyb->assignment[30] = 37;

// 	int count = 0;
	
// 	for (int i = 0; i < keyb->krows; i++){
// 		for (int j = 0; j < keyb->kcols; j++){
// 			if (i == 0 && j == 0){
// 				cout << " ";
// 			}
// 			if (keyb->grid[count] != -1)
// 				cout << setw(3) << data->char_list[keyb->grid[count]];
// 			else
// 				cout<< setw(3) << "*";
// 			count++;
// 		}
// 		cout << endl;
// 	}

//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
//T H E O F A N D I W  S  R  Y  U  B  C  V  M  L  P  K  G  J  Q  X  Z  _  _  _  _  _ 

	keyb->kcols = 10;
	keyb->krows = 4;

	keyb->grid = new int [keyb->ksize];

	for (int i = 0; i < keyb->ksize; i++){
		keyb->grid[i] = -1;
	}
	
	keyb->assignment = new int [data->size];

	for (int i = 0; i < data->size; i++){
		keyb->assignment[i] = -1;
	}
	keyb->grid[0] = 23;
	keyb->grid[1] = 9;
	keyb->grid[2] = 2;
	keyb->grid[3] = 11;
	keyb->grid[4] = 0;
	keyb->grid[5] = 12;
	keyb->grid[6] = 13;
	keyb->grid[7] = 8;
	keyb->grid[8] = 3;
	keyb->grid[9] = 19;
	keyb->grid[11] = 5;
	keyb->grid[12] = 10;
	keyb->grid[13] = 7;
	keyb->grid[14] = 4;
	keyb->grid[15] = 21;
	keyb->grid[16] = 1;
	keyb->grid[17] = 22;
	keyb->grid[18] = 20;
	keyb->grid[19] = 18;
	keyb->grid[22] = 25;
	keyb->grid[23] = 24;
	keyb->grid[24] = 15;
	keyb->grid[25] = 16;
	keyb->grid[26] = 14;
	keyb->grid[27] = 6;
	keyb->grid[28] = 17;
	keyb->grid[33] = 27;
	keyb->grid[34] = 28;
	keyb->grid[35] = 29;
	keyb->grid[36] = 30;
	keyb->grid[37] = 31;

	keyb->assignment[0] = 4;
	keyb->assignment[1] = 15;
	keyb->assignment[2] = 2;
	keyb->assignment[3] = 8;
	keyb->assignment[4] = 13;
	keyb->assignment[5] = 10;
	keyb->assignment[6] = 27;
	keyb->assignment[7] = 12;
	keyb->assignment[8] = 7;
	keyb->assignment[9] = 1;
	keyb->assignment[10] = 11;
	keyb->assignment[11] = 3;
	keyb->assignment[12] = 5;
	keyb->assignment[13] = 6;
	keyb->assignment[14] = 26;
	keyb->assignment[15] = 24;
	keyb->assignment[16] = 25;
	keyb->assignment[17] = 28;
	keyb->assignment[18] = 18;
	keyb->assignment[19] = 9;
	keyb->assignment[20] = 17;
	keyb->assignment[21] = 14;
	keyb->assignment[22] = 16;
	keyb->assignment[23] = 0;
	keyb->assignment[24] = 23;
	keyb->assignment[25] = 22;
	keyb->assignment[26] = 19;
	keyb->assignment[27] = 33;
	keyb->assignment[28] = 34;
	keyb->assignment[29] = 35;
	keyb->assignment[30] = 36;
	keyb->assignment[31] = 37;


	int count = 0;
	
	for (int i = 0; i < keyb->krows; i++){
		for (int j = 0; j < keyb->kcols; j++){
			if (i == 0 && j == 0){
				cout << " ";
			}
			if (keyb->grid[count] != -1)
				cout << setw(3) << data->char_list[keyb->grid[count]];
			else
				cout<< setw(3) << "*";
			count++;
		}
		cout << endl;
	}
}

void qwertyPtAssign (Gendata *data, Keyboard *keyb){
// //0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
// //E A O S R I D N T M  C  U  P  L  V  F  G  B  Q  H  Z  J  X  W  Y  K  _  _  _  _  _
	
// 	keyb->kcols = 10;
// 	keyb->krows = 4;

// 	keyb->grid = new int [keyb->ksize];

// 	for (int i = 0; i < keyb->ksize; i++){
// 		keyb->grid[i] = -1;
// 	}
	
// 	keyb->assignment = new int [data->size];

// 	for (int i = 0; i < data->size; i++){
// 		keyb->assignment[i] = -1;
// 	}

// 	keyb->grid[0] = 18;
// 	keyb->grid[1] = 23;
// 	keyb->grid[2] = 0;
// 	keyb->grid[3] = 4;
// 	keyb->grid[4] = 8;
// 	keyb->grid[5] = 24;
// 	keyb->grid[6] = 11;
// 	keyb->grid[7] = 5;
// 	keyb->grid[8] = 2;
// 	keyb->grid[9] = 12;
// 	keyb->grid[11] = 1;
// 	keyb->grid[12] = 3;
// 	keyb->grid[13] = 6;
// 	keyb->grid[14] = 15;
// 	keyb->grid[15] = 16;
// 	keyb->grid[16] = 19;
// 	keyb->grid[17] = 21;
// 	keyb->grid[18] = 25;
// 	keyb->grid[19] = 13;
// 	keyb->grid[22] = 20;
// 	keyb->grid[23] = 22;
// 	keyb->grid[24] = 10;
// 	keyb->grid[25] = 14;
// 	keyb->grid[26] = 17;
// 	keyb->grid[27] = 7;
// 	keyb->grid[28] = 9;
// 	keyb->grid[33] = 26;
// 	keyb->grid[34] = 27;
// 	keyb->grid[35] = 28;
// 	keyb->grid[36] = 29;
// 	keyb->grid[37] = 30;

// 	keyb->assignment[0] = 2;
// 	keyb->assignment[1] = 11;
// 	keyb->assignment[2] = 8;
// 	keyb->assignment[3] = 12;
// 	keyb->assignment[4] = 3;
// 	keyb->assignment[5] = 7;
// 	keyb->assignment[6] = 13;
// 	keyb->assignment[7] = 27;
// 	keyb->assignment[8] = 4;
// 	keyb->assignment[9] = 28;
// 	keyb->assignment[10] = 24;
// 	keyb->assignment[11] = 6;
// 	keyb->assignment[12] = 9;
// 	keyb->assignment[13] = 19;
// 	keyb->assignment[14] = 25;
// 	keyb->assignment[15] = 14;
// 	keyb->assignment[16] = 15;
// 	keyb->assignment[17] = 26;
// 	keyb->assignment[18] = 0;
// 	keyb->assignment[19] = 16;
// 	keyb->assignment[20] = 22;
// 	keyb->assignment[21] = 17;
// 	keyb->assignment[22] = 23;
// 	keyb->assignment[23] = 1;
// 	keyb->assignment[24] = 5;
// 	keyb->assignment[25] = 18;
// 	keyb->assignment[26] = 33;
// 	keyb->assignment[27] = 34;
// 	keyb->assignment[28] = 35;
// 	keyb->assignment[29] = 36;
// 	keyb->assignment[30] = 37;

// 	int count = 0;
	
// 	for (int i = 0; i < keyb->krows; i++){
// 		for (int j = 0; j < keyb->kcols; j++){
// 			if (i == 0 && j == 0){
// 				cout << " ";
// 			}
// 			if (keyb->grid[count] != -1)
// 				cout << setw(3) << data->char_list[keyb->grid[count]];
// 			else
// 				cout<< setw(3) << "*";
// 			count++;
// 		}
// 		cout << endl;
// 	}

//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
//T H E O F A N D I W  S  R  Y  U  B  C  V  M  L  P  K  G  J  Q  X  Z  _  _  _  _  _ 
	

	keyb->kcols = 10;
	keyb->krows = 4;

	keyb->grid = new int [keyb->ksize];

	for (int i = 0; i < keyb->ksize; i++){
		keyb->grid[i] = -1;
	}
	
	keyb->assignment = new int [data->size];

	for (int i = 0; i < data->size; i++){
		keyb->assignment[i] = -1;
	}
	keyb->grid[0] = 23;
	keyb->grid[1] = 9;
	keyb->grid[2] = 2;
	keyb->grid[3] = 11;
	keyb->grid[4] = 0;
	keyb->grid[5] = 12;
	keyb->grid[6] = 13;
	keyb->grid[7] = 8;
	keyb->grid[8] = 3;
	keyb->grid[9] = 19;
	keyb->grid[11] = 5;
	keyb->grid[12] = 10;
	keyb->grid[13] = 7;
	keyb->grid[14] = 4;
	keyb->grid[15] = 21;
	keyb->grid[16] = 1;
	keyb->grid[17] = 22;
	keyb->grid[18] = 20;
	keyb->grid[19] = 18;
	keyb->grid[22] = 25;
	keyb->grid[23] = 24;
	keyb->grid[24] = 15;
	keyb->grid[25] = 16;
	keyb->grid[26] = 14;
	keyb->grid[27] = 6;
	keyb->grid[28] = 17;
	keyb->grid[33] = 27;
	keyb->grid[34] = 28;
	keyb->grid[35] = 29;
	keyb->grid[36] = 30;
	keyb->grid[37] = 31;

	keyb->assignment[0] = 4;
	keyb->assignment[1] = 15;
	keyb->assignment[2] = 2;
	keyb->assignment[3] = 8;
	keyb->assignment[4] = 13;
	keyb->assignment[5] = 10;
	keyb->assignment[6] = 27;
	keyb->assignment[7] = 12;
	keyb->assignment[8] = 7;
	keyb->assignment[9] = 1;
	keyb->assignment[10] = 11;
	keyb->assignment[11] = 3;
	keyb->assignment[12] = 5;
	keyb->assignment[13] = 6;
	keyb->assignment[14] = 26;
	keyb->assignment[15] = 24;
	keyb->assignment[16] = 25;
	keyb->assignment[17] = 28;
	keyb->assignment[18] = 18;
	keyb->assignment[19] = 9;
	keyb->assignment[20] = 17;
	keyb->assignment[21] = 14;
	keyb->assignment[22] = 16;
	keyb->assignment[23] = 0;
	keyb->assignment[24] = 23;
	keyb->assignment[25] = 22;
	keyb->assignment[26] = 19;
	keyb->assignment[27] = 33;
	keyb->assignment[28] = 34;
	keyb->assignment[29] = 35;
	keyb->assignment[30] = 36;
	keyb->assignment[31] = 37;


	int count = 0;
	
	for (int i = 0; i < keyb->krows; i++){
		for (int j = 0; j < keyb->kcols; j++){
			if (i == 0 && j == 0){
				cout << " ";
			}
			if (keyb->grid[count] != -1)
				cout << setw(3) << data->char_list[keyb->grid[count]];
			else
				cout<< setw(3) << "*";
			count++;
		}
		cout << endl;
	}
}

void qwertynAssign (Gendata *data, Keyboard *keyb){

	//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
	//D E Q U N O A L S Y  P  R  M  T  C  I  H  B  G  V  F  Z  J  ñ  K  X  W  _  _  _  _  _
//QWERTYN original

	// vector<int> v1;
	// vector<int> v2;
	// vector<int> v3;
	// vector<int> v4;
	// vector<int> v5;

	// int sp;

	// keyb->kcols = 10;
	// keyb->krows = 4;

	// keyb->grid = new int [keyb->ksize];

	// for (int i = 0; i < keyb->ksize; i++){
	// 	keyb->grid[i] = -1;
	// }
	
	// keyb->assignment = new int [data->size];

	// for (int i = 0; i < data->size; i++){
	// 	keyb->assignment[i] = -1;
	// }

	// keyb->grid[0] = 2;
	// keyb->grid[1] = 26;
	// keyb->grid[2] = 1;
	// keyb->grid[3] = 11;
	// keyb->grid[4] = 13;
	// keyb->grid[5] = 9;
	// keyb->grid[6] = 3;
	// keyb->grid[7] = 15;
	// keyb->grid[8] = 5;
	// keyb->grid[9] = 10;
	// keyb->grid[10] = 6;
	// keyb->grid[11] = 8;
	// keyb->grid[12] = 0;
	// keyb->grid[13] = 20;
	// keyb->grid[14] = 18;
	// keyb->grid[15] = 16;
	// keyb->grid[16] = 22;
	// keyb->grid[17] = 24;
	// keyb->grid[18] = 7;
	// keyb->grid[19] = 23;
	// keyb->grid[22] = 21;
	// keyb->grid[23] = 25;
	// keyb->grid[24] = 14;
	// keyb->grid[25] = 19;
	// keyb->grid[26] = 17;
	// keyb->grid[27] = 4;
	// keyb->grid[28] = 12;
	// keyb->grid[33] = 27;
	// keyb->grid[34] = 28;
	// keyb->grid[35] = 29;
	// keyb->grid[36] = 30;
	// keyb->grid[37] = 31;

	// keyb->assignment[0] = 12;
	// keyb->assignment[1] = 2;
	// keyb->assignment[2] = 0;
	// keyb->assignment[3] = 6;
	// keyb->assignment[4] = 27;
	// keyb->assignment[5] = 8;
	// keyb->assignment[6] = 10;
	// keyb->assignment[7] = 18;
	// keyb->assignment[8] = 11;
	// keyb->assignment[9] = 5;
	// keyb->assignment[10] = 9;
	// keyb->assignment[11] = 3;
	// keyb->assignment[12] = 28;
	// keyb->assignment[13] = 4;
	// keyb->assignment[14] = 24;
	// keyb->assignment[15] = 7;
	// keyb->assignment[16] = 15;
	// keyb->assignment[17] = 26;
	// keyb->assignment[18] = 14;
	// keyb->assignment[19] = 25;
	// keyb->assignment[20] = 13;
	// keyb->assignment[21] = 22;
	// keyb->assignment[22] = 16;
	// keyb->assignment[23] = 19;
	// keyb->assignment[24] = 17;
	// keyb->assignment[25] = 23;
	// keyb->assignment[26] = 1;
	// keyb->assignment[27] = 33;
	// keyb->assignment[28] = 34;
	// keyb->assignment[29] = 35;
	// keyb->assignment[30] = 36;
	// keyb->assignment[31] = 37;
	
	// //  	cout << "\n0." << endl;
	// //  	getchar();

	// // long long bestSp;

	// // for (int i = 0; i < 33; i++){
	// // 	bestSp = numeric_limits<long long>::max();
	// // 	for (int j = 33; j < 38; j++){

	// // 		if(data->b_matrix[i][j] < bestSp){
	// // 			bestSp = data->b_matrix[i][j];
	// // 			sp = j;
	// // 		}
	// // 	}
	// // 	switch(sp){
	// // 		case 33:
	// // 			v1.push_back(i);
	// // 			break;

	// // 		case 34:
	// // 			v2.push_back(i);
	// // 			break;

	// // 		case 35:
	// // 			v3.push_back(i);
	// // 			break;
			
	// // 		case 36:
	// // 			v4.push_back(i);
	// // 			break;

	// // 		case 37:
	// // 			v5.push_back(i);
	// // 			break;
	// // 	}
	// // }
	// // cout << "\n1." << endl;
	// // getchar();

	// // cout << "\nv1: ";
	// // for (int i = 0; i < v1.size(); i++){
	// // 	cout << v1[i] << " ";
	// // }
	// // cout << endl;
	
	// // cout << "\nv2: ";
	// // for (int i = 0; i < v2.size(); i++){
	// // 	cout << v2[i] << " ";
	// // }
	// // cout << endl;	
	
	// // cout << "\nv3: ";
	// // for (int i = 0; i < v3.size(); i++){
	// // 	cout << v3[i] << " ";
	// // }
	// // cout << endl;	
	
	// // cout << "\nv4: ";
	// // for (int i = 0; i < v4.size(); i++){
	// // 	cout << v4[i] << " ";
	// // }
	// // cout << endl;
	
	// // cout << "\nv5: ";
	// // for (int i = 0; i < v5.size(); i++){
	// // 	cout << v5[i] << " ";
	// // }
	// // cout << endl;

	// int count = 0;
	
	// for (int i = 0; i < keyb->krows; i++){
	// 	for (int j = 0; j < keyb->kcols; j++){
	// 		if (i == 0 && j == 0){
	// 			cout << " ";
	// 		}
	// 		if (i == 1 && j == 0){
	// 			cout << " ";
	// 		}
	// 		if (keyb->grid[count] != -1)
	// 			cout << setw(3) << data->char_list[keyb->grid[count]];
	// 		else
	// 			cout<< setw(3) << "*";
	// 		count++;
	// 	}
	// 	cout << endl;
	// }

//QWERTYN Bilingual

//    Q  W  E  R  T  Y  U  I  O  P
//    A  S  D  F  G  H  J  K  L  n
//   *  *  Z  X  C  V  B  N  M  *
//   *  *  *  _  _  _  _  _  *  *

// Cost of Qwerty: 1415388952

	//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
	//T H E O F A N D I W  S  R  Y  U  B  C  V  M  L  P  K  G  J  Q  X  Z  n  _  _  _  _  _ 


	vector<int> v1;
	vector<int> v2;
	vector<int> v3;
	vector<int> v4;
	vector<int> v5;

	int sp;

	keyb->kcols = 10;
	keyb->krows = 4;

	keyb->grid = new int [keyb->ksize];

	for (int i = 0; i < keyb->ksize; i++){
		keyb->grid[i] = -1;
	}
	
	keyb->assignment = new int [data->size];

	for (int i = 0; i < data->size; i++){
		keyb->assignment[i] = -1;
	}

	keyb->grid[0] = 23;
	keyb->grid[1] = 9;
	keyb->grid[2] = 2;
	keyb->grid[3] = 11;
	keyb->grid[4] = 0;
	keyb->grid[5] = 12;
	keyb->grid[6] = 13;
	keyb->grid[7] = 8;
	keyb->grid[8] = 3;
	keyb->grid[9] = 19;
	keyb->grid[10] = 5;
	keyb->grid[11] = 10;
	keyb->grid[12] = 7;
	keyb->grid[13] = 4;
	keyb->grid[14] = 21;
	keyb->grid[15] = 1;
	keyb->grid[16] = 22;
	keyb->grid[17] = 20;
	keyb->grid[18] = 18;
	keyb->grid[19] = 26;
	keyb->grid[22] = 25;
	keyb->grid[23] = 24;
	keyb->grid[24] = 15;
	keyb->grid[25] = 16;
	keyb->grid[26] = 14;
	keyb->grid[27] = 6;
	keyb->grid[28] = 17;
	keyb->grid[33] = 27;
	keyb->grid[34] = 28;
	keyb->grid[35] = 29;
	keyb->grid[36] = 30;
	keyb->grid[37] = 31;

	keyb->assignment[0] = 4;
	keyb->assignment[1] = 15;
	keyb->assignment[2] = 2;
	keyb->assignment[3] = 8;
	keyb->assignment[4] = 13;
	keyb->assignment[5] = 10;
	keyb->assignment[6] = 27;
	keyb->assignment[7] = 12;
	keyb->assignment[8] = 7;
	keyb->assignment[9] = 1;
	keyb->assignment[10] = 11;
	keyb->assignment[11] = 3;
	keyb->assignment[12] = 5;
	keyb->assignment[13] = 6;
	keyb->assignment[14] = 26;
	keyb->assignment[15] = 24;
	keyb->assignment[16] = 25;
	keyb->assignment[17] = 28;
	keyb->assignment[18] = 18;
	keyb->assignment[19] = 9;
	keyb->assignment[20] = 17;
	keyb->assignment[21] = 14;
	keyb->assignment[22] = 16;
	keyb->assignment[23] = 0;
	keyb->assignment[24] = 23;
	keyb->assignment[25] = 22;
	keyb->assignment[26] = 19;
	keyb->assignment[27] = 33;
	keyb->assignment[28] = 34;
	keyb->assignment[29] = 35;
	keyb->assignment[30] = 36;
	keyb->assignment[31] = 37;
	
	int count = 0;
	
	for (int i = 0; i < keyb->krows; i++){
		for (int j = 0; j < keyb->kcols; j++){
			if (i == 0 && j == 0){
				cout << " ";
			}
			if (i == 1 && j == 0){
				cout << " ";
			}
			if (keyb->grid[count] != -1)
				cout << setw(3) << data->char_list[keyb->grid[count]];
			else
				cout<< setw(3) << "*";
			count++;
		}
		cout << endl;
	}

}

void azertyAssign (Gendata *data, Keyboard *keyb){
//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
//D E L A ' T S N U Q  I  P  R  O  C  X  V  M  Y  F  B  G  H  J  W  Z  K  _  _  _  _  _
//Original Azerty	
	// keyb->kcols = 10;
	// keyb->krows = 4;

	// keyb->grid = new int [keyb->ksize];

	// for (int i = 0; i < keyb->ksize; i++){
	// 	keyb->grid[i] = -1;
	// }
	
	// keyb->assignment = new int [data->size];

	// for (int i = 0; i < data->size; i++){
	// 	keyb->assignment[i] = -1;
	// }

	// keyb->grid[0] = 3;
	// keyb->grid[1] = 25;
	// keyb->grid[2] = 1;
	// keyb->grid[3] = 12;
	// keyb->grid[4] = 5;
	// keyb->grid[5] = 18;
	// keyb->grid[6] = 8;
	// keyb->grid[7] = 10;
	// keyb->grid[8] = 13;
	// keyb->grid[9] = 11;
	// keyb->grid[10] = 9;
	// keyb->grid[11] = 6;
	// keyb->grid[12] = 0;
	// keyb->grid[13] = 19;
	// keyb->grid[14] = 21;
	// keyb->grid[15] = 22;
	// keyb->grid[16] = 23;
	// keyb->grid[17] = 26;
	// keyb->grid[18] = 2;
	// keyb->grid[19] = 17;
	// keyb->grid[22] = 24;
	// keyb->grid[23] = 15;
	// keyb->grid[24] = 14;
	// keyb->grid[25] = 16;
	// keyb->grid[26] = 20;
	// keyb->grid[27] = 7;
	// keyb->grid[28] = 4;
	// keyb->grid[33] = 27;
	// keyb->grid[34] = 28;
	// keyb->grid[35] = 29;
	// keyb->grid[36] = 30;
	// keyb->grid[37] = 31;

	// keyb->assignment[0] = 12;
	// keyb->assignment[1] = 2;
	// keyb->assignment[2] = 18;
	// keyb->assignment[3] = 0;
	// keyb->assignment[4] = 28;
	// keyb->assignment[5] = 4;
	// keyb->assignment[6] = 11;
	// keyb->assignment[7] = 27;
	// keyb->assignment[8] = 6;
	// keyb->assignment[9] = 10;
	// keyb->assignment[10] = 7;
	// keyb->assignment[11] = 9;
	// keyb->assignment[12] = 3;
	// keyb->assignment[13] = 8;
	// keyb->assignment[14] = 24;
	// keyb->assignment[15] = 23;
	// keyb->assignment[16] = 25;
	// keyb->assignment[17] = 19;
	// keyb->assignment[18] = 5;
	// keyb->assignment[19] = 13;
	// keyb->assignment[20] = 26;
	// keyb->assignment[21] = 14;
	// keyb->assignment[22] = 24;
	// keyb->assignment[23] = 16;
	// keyb->assignment[24] = 22;
	// keyb->assignment[25] = 1;
	// keyb->assignment[26] = 17;
	// keyb->assignment[27] = 33;
	// keyb->assignment[28] = 34;
	// keyb->assignment[29] = 35;
	// keyb->assignment[30] = 36;
	// keyb->assignment[31] = 37;

	// int count = 0;
	
	// for (int i = 0; i < keyb->krows; i++){
	// 	for (int j = 0; j < keyb->kcols; j++){
	// 		if (i == 0 && j == 0){
	// 			cout << " ";
	// 		}
	// 		if (i == 1 && j == 0){
	// 			cout << " ";
	// 		}
	// 		if (keyb->grid[count] != -1)
	// 			cout << setw(3) << data->char_list[keyb->grid[count]];
	// 		else
	// 			cout<< setw(3) << "*";
	// 		count++;
	// 	}
	// 	cout << endl;
	// }

//Azerty En+Fr
//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
//T H E O F A N D I W  S  R  Y  U  B  C  V  M  L  P  K  G  J  Q  X  '  Z  _  _  _  _  _ 

//    A  Z  E  R  T  Y  U  I  O  P
//    Q  S  D  F  G  H  J  K  L  M
//   *  *  W  X  C  V  B  N  '  *
//   *  *  *  _  _  _  _  _  *  *

// Cost of Qwerty: 15278765445

	keyb->kcols = 10;
	keyb->krows = 4;

	keyb->grid = new int [keyb->ksize];

	for (int i = 0; i < keyb->ksize; i++){
		keyb->grid[i] = -1;
	}
	
	keyb->assignment = new int [data->size];

	for (int i = 0; i < data->size; i++){
		keyb->assignment[i] = -1;
	}

	keyb->grid[0] = 5;
	keyb->grid[1] = 26;
	keyb->grid[2] = 2;
	keyb->grid[3] = 11;
	keyb->grid[4] = 0;
	keyb->grid[5] = 12;
	keyb->grid[6] = 13;
	keyb->grid[7] = 8;
	keyb->grid[8] = 3;
	keyb->grid[9] = 19;
	keyb->grid[10] = 23;
	keyb->grid[11] = 10;
	keyb->grid[12] = 7;
	keyb->grid[13] = 4;
	keyb->grid[14] = 21;
	keyb->grid[15] = 1;
	keyb->grid[16] = 22;
	keyb->grid[17] = 20;
	keyb->grid[18] = 18;
	keyb->grid[19] = 17;
	keyb->grid[22] = 9;
	keyb->grid[23] = 24;
	keyb->grid[24] = 15;
	keyb->grid[25] = 16;
	keyb->grid[26] = 14;
	keyb->grid[27] = 6;
	keyb->grid[28] = 25;
	keyb->grid[33] = 27;
	keyb->grid[34] = 28;
	keyb->grid[35] = 29;
	keyb->grid[36] = 30;
	keyb->grid[37] = 31;

	keyb->assignment[0] = 4;
	keyb->assignment[1] = 15;
	keyb->assignment[2] = 2;
	keyb->assignment[3] = 8;
	keyb->assignment[4] = 13;
	keyb->assignment[5] = 0;
	keyb->assignment[6] = 27;
	keyb->assignment[7] = 12;
	keyb->assignment[8] = 7;
	keyb->assignment[9] = 22;
	keyb->assignment[10] = 11;
	keyb->assignment[11] = 3;
	keyb->assignment[12] = 5;
	keyb->assignment[13] = 6;
	keyb->assignment[14] = 26;
	keyb->assignment[15] = 24;
	keyb->assignment[16] = 25;
	keyb->assignment[17] = 19;
	keyb->assignment[18] = 18;
	keyb->assignment[19] = 9;
	keyb->assignment[20] = 17;
	keyb->assignment[21] = 14;
	keyb->assignment[22] = 16;
	keyb->assignment[23] = 10;
	keyb->assignment[24] = 23;
	keyb->assignment[25] = 28;
	keyb->assignment[26] = 1;
	keyb->assignment[27] = 33;
	keyb->assignment[28] = 34;
	keyb->assignment[29] = 35;
	keyb->assignment[30] = 36;
	keyb->assignment[31] = 37;

	int count = 0;
	
	for (int i = 0; i < keyb->krows; i++){
		for (int j = 0; j < keyb->kcols; j++){
			if (i == 0 && j == 0){
				cout << " ";
			}
			if (i == 1 && j == 0){
				cout << " ";
			}
			if (keyb->grid[count] != -1)
				cout << setw(3) << data->char_list[keyb->grid[count]];
			else
				cout<< setw(3) << "*";
			count++;
		}
		cout << endl;
	}
}

void hybEng (Gendata *data, Keyboard *keyb){
//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
//T H E O F A N D I W S  R  Y  U  B  C  V  M  L  P  K  G  J  Q  X  Z  _
	
	keyb->kcols = 10;
	keyb->krows = 4;

	keyb->grid = new int [keyb->ksize];

	for (int i = 0; i < keyb->ksize; i++){
		keyb->grid[i] = -1;
	}
	
	keyb->assignment = new int [data->size];

	for (int i = 0; i < data->size; i++){
		keyb->assignment[i] = -1;
	}

	// keyb->grid[0] = 24;
	// keyb->grid[1] = 21;
	// keyb->grid[2] = 7;
	// keyb->grid[3] = 6;
	// keyb->grid[4] = 5;
	// keyb->grid[5] = 18;
	// keyb->grid[6] = 17;
	// keyb->grid[7] = 12;
	// keyb->grid[8] = 22;
	// keyb->grid[10] = 25;
	// keyb->grid[11] = 16;
	// keyb->grid[12] = 15;
	// keyb->grid[13] = 8;
	// keyb->grid[14] = 2;
	// keyb->grid[15] = 11;
	// keyb->grid[16] = 3;
	// keyb->grid[17] = 4;
	// keyb->grid[18] = 14;
	// keyb->grid[21] = 20;
	// keyb->grid[22] = 9;
	// keyb->grid[23] = 1;
	// keyb->grid[24] = 0;
	// keyb->grid[25] = 10;
	// keyb->grid[26] = 13;
	// keyb->grid[27] = 19;
	// keyb->grid[28] = 23;
	// keyb->grid[33] = 26;
	// keyb->grid[34] = 27;
	// keyb->grid[35] = 28;
	// keyb->grid[36] = 29;
	// keyb->grid[37] = 30;

	// keyb->assignment[0] = 24;
	// keyb->assignment[1] = 23;
	// keyb->assignment[2] = 14;
	// keyb->assignment[3] = 16;
	// keyb->assignment[4] = 17;
	// keyb->assignment[5] = 4;
	// keyb->assignment[6] = 3;
	// keyb->assignment[7] = 2;
	// keyb->assignment[8] = 13;
	// keyb->assignment[9] = 22;
	// keyb->assignment[10] = 25;
	// keyb->assignment[11] = 15;
	// keyb->assignment[12] = 7;
	// keyb->assignment[13] = 26;
	// keyb->assignment[14] = 18;
	// keyb->assignment[15] = 12;
	// keyb->assignment[16] = 11;
	// keyb->assignment[17] = 6;
	// keyb->assignment[18] = 5;
	// keyb->assignment[19] = 27;
	// keyb->assignment[20] = 21;
	// keyb->assignment[21] = 1;
	// keyb->assignment[22] = 8;
	// keyb->assignment[23] = 28;
	// keyb->assignment[24] = 0;
	// keyb->assignment[25] = 10;
	// keyb->assignment[26] = 33;
	// keyb->assignment[27] = 34;
	// keyb->assignment[28] = 35;
	// keyb->assignment[29] = 36;
	// keyb->assignment[30] = 37;

//transladado

	keyb->grid[1] = 24;
	keyb->grid[2] = 21;
	keyb->grid[3] = 7;
	keyb->grid[4] = 6;
	keyb->grid[5] = 5;
	keyb->grid[6] = 18;
	keyb->grid[7] = 17;
	keyb->grid[8] = 12;
	keyb->grid[9] = 22;
	keyb->grid[11] = 25;
	keyb->grid[12] = 16;
	keyb->grid[13] = 15;
	keyb->grid[14] = 8;
	keyb->grid[15] = 2;
	keyb->grid[16] = 11;
	keyb->grid[17] = 3;
	keyb->grid[18] = 4;
	keyb->grid[19] = 14;
	keyb->grid[22] = 20;
	keyb->grid[23] = 9;
	keyb->grid[24] = 1;
	keyb->grid[25] = 0;
	keyb->grid[26] = 10;
	keyb->grid[27] = 13;
	keyb->grid[28] = 19;
	keyb->grid[29] = 23;
	keyb->grid[33] = 26;
	keyb->grid[34] = 27;
	keyb->grid[35] = 28;
	keyb->grid[36] = 29;
	keyb->grid[37] = 30;

	keyb->assignment[0] = 25;
	keyb->assignment[1] = 24;
	keyb->assignment[2] = 15;
	keyb->assignment[3] = 17;
	keyb->assignment[4] = 18;
	keyb->assignment[5] = 5;
	keyb->assignment[6] = 4;
	keyb->assignment[7] = 3;
	keyb->assignment[8] = 14;
	keyb->assignment[9] = 23;
	keyb->assignment[10] = 26;
	keyb->assignment[11] = 16;
	keyb->assignment[12] = 8;
	keyb->assignment[13] = 27;
	keyb->assignment[14] = 19;
	keyb->assignment[15] = 13;
	keyb->assignment[16] = 12;
	keyb->assignment[17] = 7;
	keyb->assignment[18] = 6;
	keyb->assignment[19] = 28;
	keyb->assignment[20] = 22;
	keyb->assignment[21] = 2;
	keyb->assignment[22] = 9;
	keyb->assignment[23] = 29;
	keyb->assignment[24] = 1;
	keyb->assignment[25] = 11;
	keyb->assignment[26] = 33;
	keyb->assignment[27] = 34;
	keyb->assignment[28] = 35;
	keyb->assignment[29] = 36;
	keyb->assignment[30] = 37;

	int count = 0;
	
	for (int i = 0; i < keyb->krows; i++){
		for (int j = 0; j < keyb->kcols; j++){
			if (i == 0 && j == 0){
				cout << " ";
			}
			if (keyb->grid[count] != -1)
				cout << setw(3) << data->char_list[keyb->grid[count]];
			else
				cout<< setw(3) << "*";
			count++;
		}
		cout << endl;
	}
}

void hybIt (Gendata *data, Keyboard *keyb){
//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
//E C H I L A N U P R  O  D  S  M  G  Q  T  V  F  Z  B  X  W  Y  K  J  _  _  _  _  _
	
	keyb->kcols = 10;
	keyb->krows = 4;

	keyb->grid = new int [keyb->ksize];

	for (int i = 0; i < keyb->ksize; i++){
		keyb->grid[i] = -1;
	}
	
	keyb->assignment = new int [data->size];

	for (int i = 0; i < data->size; i++){
		keyb->assignment[i] = -1;
	}

	// keyb->grid[0] = 21;
	// keyb->grid[1] = 17;
	// keyb->grid[2] = 8;
	// keyb->grid[3] = 9;
	// keyb->grid[4] = 0;
	// keyb->grid[5] = 12;
	// keyb->grid[6] = 11;
	// keyb->grid[7] = 18;
	// keyb->grid[10] = 23;
	// keyb->grid[11] = 20;
	// keyb->grid[12] = 13;
	// keyb->grid[13] = 5;
	// keyb->grid[14] = 16;
	// keyb->grid[15] = 10;
	// keyb->grid[16] = 1;
	// keyb->grid[17] = 2;
	// keyb->grid[18] = 24;
	// keyb->grid[20] = 22;
	// keyb->grid[21] = 19;
	// keyb->grid[22] = 14;
	// keyb->grid[23] = 4;
	// keyb->grid[24] = 3;
	// keyb->grid[25] = 6;
	// keyb->grid[26] = 7;
	// keyb->grid[27] = 15;
	// keyb->grid[28] = 25;
	// keyb->grid[33] = 26;
	// keyb->grid[34] = 27;
	// keyb->grid[35] = 28;
	// keyb->grid[36] = 29;
	// keyb->grid[37] = 30;

	// keyb->assignment[0] = 4;
	// keyb->assignment[1] = 16;
	// keyb->assignment[2] = 17;
	// keyb->assignment[3] = 24;
	// keyb->assignment[4] = 23;
	// keyb->assignment[5] = 13;
	// keyb->assignment[6] = 25;
	// keyb->assignment[7] = 26;
	// keyb->assignment[8] = 2;
	// keyb->assignment[9] = 3;
	// keyb->assignment[10] = 15;
	// keyb->assignment[11] = 6;
	// keyb->assignment[12] = 5;
	// keyb->assignment[13] = 12;
	// keyb->assignment[14] = 22;
	// keyb->assignment[15] = 27;
	// keyb->assignment[16] = 14;
	// keyb->assignment[17] = 1;
	// keyb->assignment[18] = 7;
	// keyb->assignment[19] = 21;
	// keyb->assignment[20] = 11;
	// keyb->assignment[21] = 0;
	// keyb->assignment[22] = 20;
	// keyb->assignment[23] = 10;
	// keyb->assignment[24] = 18;
	// keyb->assignment[25] = 28;
	// keyb->assignment[26] = 33;
	// keyb->assignment[27] = 34;
	// keyb->assignment[28] = 35;
	// keyb->assignment[29] = 36;
	// keyb->assignment[30] = 37;

//transladado
	// keyb->grid[1] = 21;
	// keyb->grid[2] = 17;
	// keyb->grid[3] = 8;
	// keyb->grid[4] = 9;
	// keyb->grid[5] = 0;
	// keyb->grid[6] = 12;
	// keyb->grid[7] = 11;
	// keyb->grid[8] = 18;
	// keyb->grid[11] = 23;
	// keyb->grid[12] = 20;
	// keyb->grid[13] = 13;
	// keyb->grid[14] = 5;
	// keyb->grid[15] = 16;
	// keyb->grid[16] = 10;
	// keyb->grid[17] = 1;
	// keyb->grid[18] = 2;
	// keyb->grid[19] = 24;
	// keyb->grid[21] = 22;
	// keyb->grid[22] = 19;
	// keyb->grid[23] = 14;
	// keyb->grid[24] = 4;
	// keyb->grid[25] = 3;
	// keyb->grid[26] = 6;
	// keyb->grid[27] = 7;
	// keyb->grid[28] = 15;
	// keyb->grid[29] = 25;
	// keyb->grid[33] = 26;
	// keyb->grid[34] = 27;
	// keyb->grid[35] = 28;
	// keyb->grid[36] = 29;
	// keyb->grid[37] = 30;

	// keyb->assignment[0] = 5;
	// keyb->assignment[1] = 17;
	// keyb->assignment[2] = 18;
	// keyb->assignment[3] = 25;
	// keyb->assignment[4] = 24;
	// keyb->assignment[5] = 14;
	// keyb->assignment[6] = 26;
	// keyb->assignment[7] = 27;
	// keyb->assignment[8] = 3;
	// keyb->assignment[9] = 4;
	// keyb->assignment[10] = 16;
	// keyb->assignment[11] = 7;
	// keyb->assignment[12] = 6;
	// keyb->assignment[13] = 13;
	// keyb->assignment[14] = 23;
	// keyb->assignment[15] = 28;
	// keyb->assignment[16] = 15;
	// keyb->assignment[17] = 2;
	// keyb->assignment[18] = 8;
	// keyb->assignment[19] = 22;
	// keyb->assignment[20] = 12;
	// keyb->assignment[21] = 1;
	// keyb->assignment[22] = 21;
	// keyb->assignment[23] = 11;
	// keyb->assignment[24] = 19;
	// keyb->assignment[25] = 29;
	// keyb->assignment[26] = 33;
	// keyb->assignment[27] = 34;
	// keyb->assignment[28] = 35;
	// keyb->assignment[29] = 36;
	// keyb->assignment[30] = 37;

//transladado e espelhado

	keyb->grid[1] = 18;
	keyb->grid[2] = 11;
	keyb->grid[3] = 12;
	keyb->grid[4] = 0;
	keyb->grid[5] = 9;
	keyb->grid[6] = 8;
	keyb->grid[7] = 17;
	keyb->grid[8] = 21;
	keyb->grid[11] = 24;
	keyb->grid[12] = 2;
	keyb->grid[13] = 1;
	keyb->grid[14] = 10;
	keyb->grid[15] = 16;
	keyb->grid[16] = 5;
	keyb->grid[17] = 13;
	keyb->grid[18] = 20;
	keyb->grid[19] = 23;
	keyb->grid[21] = 25;
	keyb->grid[22] = 15;
	keyb->grid[23] = 7;
	keyb->grid[24] = 6;
	keyb->grid[25] = 3;
	keyb->grid[26] = 4;
	keyb->grid[27] = 14;
	keyb->grid[28] = 19;
	keyb->grid[29] = 22;
	keyb->grid[33] = 26;
	keyb->grid[34] = 27;
	keyb->grid[35] = 28;
	keyb->grid[36] = 29;
	keyb->grid[37] = 30;

	keyb->assignment[0] = 4;
	keyb->assignment[1] = 13;
	keyb->assignment[2] = 12;
	keyb->assignment[3] = 25;
	keyb->assignment[4] = 26;
	keyb->assignment[5] = 16;
	keyb->assignment[6] = 24;
	keyb->assignment[7] = 23;
	keyb->assignment[8] = 6;
	keyb->assignment[9] = 5;
	keyb->assignment[10] = 14;
	keyb->assignment[11] = 2;
	keyb->assignment[12] = 3;
	keyb->assignment[13] = 17;
	keyb->assignment[14] = 27;
	keyb->assignment[15] = 22;
	keyb->assignment[16] = 15;
	keyb->assignment[17] = 7;
	keyb->assignment[18] = 1;
	keyb->assignment[19] = 28;
	keyb->assignment[20] = 18;
	keyb->assignment[21] = 8;
	keyb->assignment[22] = 29;
	keyb->assignment[23] = 19;
	keyb->assignment[24] = 11;
	keyb->assignment[25] = 21;
	keyb->assignment[26] = 33;
	keyb->assignment[27] = 34;
	keyb->assignment[28] = 35;
	keyb->assignment[29] = 36;
	keyb->assignment[30] = 37;


	int count = 0;
	
	for (int i = 0; i < keyb->krows; i++){
		for (int j = 0; j < keyb->kcols; j++){
			if (i == 0 && j == 0){
				cout << " ";
			}
			if (keyb->grid[count] != -1)
				cout << setw(3) << data->char_list[keyb->grid[count]];
			else
				cout<< setw(3) << "*";
			count++;
		}
		cout << endl;
	}
}

void hybPt (Gendata *data, Keyboard *keyb){
//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
//E A O S R I D N T M  C  U  P  L  V  F  G  B  Q  H  Z  J  X  W  Y  K  _  _  _  _  _
	
	// keyb->kcols = 10;
	// keyb->krows = 4;

	// keyb->grid = new int [keyb->ksize];

	// for (int i = 0; i < keyb->ksize; i++){
	// 	keyb->grid[i] = -1;
	// }
	
	// keyb->assignment = new int [data->size];

	// for (int i = 0; i < data->size; i++){
	// 	keyb->assignment[i] = -1;
	// }

	// keyb->grid[1] = 22;
	// keyb->grid[2] = 18;
	// keyb->grid[3] = 11;
	// keyb->grid[4] = 8;
	// keyb->grid[5] = 7;
	// keyb->grid[6] = 10;
	// keyb->grid[7] = 14;
	// keyb->grid[8] = 20;
	// keyb->grid[11] = 21;
	// keyb->grid[12] = 16;
	// keyb->grid[13] = 9;
	// keyb->grid[14] = 0;
	// keyb->grid[15] = 3;
	// keyb->grid[16] = 1;
	// keyb->grid[17] = 5;
	// keyb->grid[18] = 15;
	// keyb->grid[19] = 23;
	// keyb->grid[21] = 25;
	// keyb->grid[22] = 17;
	// keyb->grid[23] = 12;
	// keyb->grid[24] = 4;
	// keyb->grid[25] = 2;
	// keyb->grid[26] = 6;
	// keyb->grid[27] = 13;
	// keyb->grid[28] = 19;
	// keyb->grid[29] = 24;
	// keyb->grid[33] = 26;
	// keyb->grid[34] = 27;
	// keyb->grid[35] = 28;
	// keyb->grid[36] = 29;
	// keyb->grid[37] = 30;

	// keyb->assignment[0] = 14;
	// keyb->assignment[1] = 16;
	// keyb->assignment[2] = 25;
	// keyb->assignment[3] = 15;
	// keyb->assignment[4] = 24;
	// keyb->assignment[5] = 17;
	// keyb->assignment[6] = 26;
	// keyb->assignment[7] = 5;
	// keyb->assignment[8] = 4;
	// keyb->assignment[9] = 13;
	// keyb->assignment[10] = 6;
	// keyb->assignment[11] = 3;
	// keyb->assignment[12] = 23;
	// keyb->assignment[13] = 27;
	// keyb->assignment[14] = 7;
	// keyb->assignment[15] = 18;
	// keyb->assignment[16] = 12;
	// keyb->assignment[17] = 22;
	// keyb->assignment[18] = 2;
	// keyb->assignment[19] = 28;
	// keyb->assignment[20] = 8;
	// keyb->assignment[21] = 11;
	// keyb->assignment[22] = 1;
	// keyb->assignment[23] = 19;
	// keyb->assignment[24] = 29;
	// keyb->assignment[25] = 21;
	// keyb->assignment[26] = 33;
	// keyb->assignment[27] = 34;
	// keyb->assignment[28] = 35;
	// keyb->assignment[29] = 36;
	// keyb->assignment[30] = 37;

	// int count = 0;
	
	// for (int i = 0; i < keyb->krows; i++){
	// 	for (int j = 0; j < keyb->kcols; j++){
	// 		if (i == 0 && j == 0){
	// 			cout << " ";
	// 		}
	// 		if (keyb->grid[count] != -1)
	// 			cout << setw(3) << data->char_list[keyb->grid[count]];
	// 		else
	// 			cout<< setw(3) << "*";
	// 		count++;
	// 	}
	// 	cout << endl;
	// }

// Best Solution: 


  // *  Z  F  C  O  D  U  Q  J  *
  // *  K  V  I  N  S  E  M  G  X
  // *  W  H  L  T  A  R  P  B  Y


// -----x-----
// Best Global Solution Cost: 8057857843

//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
//T H E O F A N D I W  S  R  Y  U  B  C  V  M  L  P  K  G  J  Q  X  Z  _  _  _  _  _ 

	keyb->kcols = 10;
	keyb->krows = 4;

	keyb->grid = new int [keyb->ksize];

	for (int i = 0; i < keyb->ksize; i++){
		keyb->grid[i] = -1;
	}
	
	keyb->assignment = new int [data->size];

	for (int i = 0; i < data->size; i++){
		keyb->assignment[i] = -1;
	}

	keyb->grid[1] = 25;
	keyb->grid[2] = 4;
	keyb->grid[3] = 15;
	keyb->grid[4] = 3;
	keyb->grid[5] = 7;
	keyb->grid[6] = 13;
	keyb->grid[7] = 23;
	keyb->grid[8] = 22;
	keyb->grid[11] = 20;
	keyb->grid[12] = 16;
	keyb->grid[13] = 8;
	keyb->grid[14] = 6;
	keyb->grid[15] = 10;
	keyb->grid[16] = 2;
	keyb->grid[17] = 17;
	keyb->grid[18] = 21;
	keyb->grid[19] = 24;
	keyb->grid[21] = 9;
	keyb->grid[22] = 1;
	keyb->grid[23] = 18;
	keyb->grid[24] = 0;
	keyb->grid[25] = 5;
	keyb->grid[26] = 11;
	keyb->grid[27] = 19;
	keyb->grid[28] = 14;
	keyb->grid[29] = 12;
	keyb->grid[33] = 26;
	keyb->grid[34] = 27;
	keyb->grid[35] = 28;
	keyb->grid[36] = 29;
	keyb->grid[37] = 30;

	keyb->assignment[0] = 24;
	keyb->assignment[1] = 22;
	keyb->assignment[2] = 16;
	keyb->assignment[3] = 4;
	keyb->assignment[4] = 2;
	keyb->assignment[5] = 25;
	keyb->assignment[6] = 14;
	keyb->assignment[7] = 5;
	keyb->assignment[8] = 13;
	keyb->assignment[9] = 21;
	keyb->assignment[10] = 15;
	keyb->assignment[11] = 26;
	keyb->assignment[12] = 29;
	keyb->assignment[13] = 6;
	keyb->assignment[14] = 28;
	keyb->assignment[15] = 3;
	keyb->assignment[16] = 12;
	keyb->assignment[17] = 17;
	keyb->assignment[18] = 23;
	keyb->assignment[19] = 27;
	keyb->assignment[20] = 11;
	keyb->assignment[21] = 18;
	keyb->assignment[22] = 8;
	keyb->assignment[23] = 7;
	keyb->assignment[24] = 19;
	keyb->assignment[25] = 1;
	keyb->assignment[26] = 33;
	keyb->assignment[27] = 34;
	keyb->assignment[28] = 35;
	keyb->assignment[29] = 36;
	keyb->assignment[30] = 37;

	int count = 0;
	
	for (int i = 0; i < keyb->krows; i++){
		for (int j = 0; j < keyb->kcols; j++){
			if (i == 0 && j == 0){
				cout << " ";
			}
			if (keyb->grid[count] != -1)
				cout << setw(3) << data->char_list[keyb->grid[count]];
			else
				cout<< setw(3) << "*";
			count++;
		}
		cout << endl;
	}

}

void hybSp (Gendata *data, Keyboard *keyb){

	//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
	//D E Q U N O A L S Y  P  R  M  T  C  I  H  B  G  V  F  Z  J  ñ  K  X  W  _  _  _  _  _

	vector<int> v1;
	vector<int> v2;
	vector<int> v3;
	vector<int> v4;
	vector<int> v5;

	int sp;

	keyb->kcols = 10;
	keyb->krows = 4;

	keyb->grid = new int [keyb->ksize];

	for (int i = 0; i < keyb->ksize; i++){
		keyb->grid[i] = -1;
	}
	
	keyb->assignment = new int [data->size];

	for (int i = 0; i < data->size; i++){
		keyb->assignment[i] = -1;
	}

	keyb->grid[0] = 20;
	keyb->grid[1] = 18;
	keyb->grid[2] = 13;
	keyb->grid[3] = 8;
	keyb->grid[4] = 5;
	keyb->grid[5] = 7;
	keyb->grid[6] = 10;
	keyb->grid[7] = 9;
	keyb->grid[8] = 26;
	keyb->grid[10] = 2;
	keyb->grid[11] = 3;
	keyb->grid[12] = 4;
	keyb->grid[13] = 1;
	keyb->grid[14] = 11;
	keyb->grid[15] = 6;
	keyb->grid[16] = 16;
	keyb->grid[17] = 21;
	keyb->grid[18] = 24;
	keyb->grid[20] = 25;
	keyb->grid[21] = 19;
	keyb->grid[22] = 14;
	keyb->grid[23] = 15;
	keyb->grid[24] = 0;
	keyb->grid[25] = 12;
	keyb->grid[26] = 17;
	keyb->grid[27] = 22;
	keyb->grid[28] = 23;
	keyb->grid[33] = 27;
	keyb->grid[34] = 28;
	keyb->grid[35] = 29;
	keyb->grid[36] = 30;
	keyb->grid[37] = 31;

	keyb->assignment[0] = 24;
	keyb->assignment[1] = 13;
	keyb->assignment[2] = 10;
	keyb->assignment[3] = 11;
	keyb->assignment[4] = 12;
	keyb->assignment[5] = 4;
	keyb->assignment[6] = 15;
	keyb->assignment[7] = 5;
	keyb->assignment[8] = 3;
	keyb->assignment[9] = 7;
	keyb->assignment[10] = 6;
	keyb->assignment[11] = 14;
	keyb->assignment[12] = 25;
	keyb->assignment[13] = 2;
	keyb->assignment[14] = 22;
	keyb->assignment[15] = 23;
	keyb->assignment[16] = 16;
	keyb->assignment[17] = 26;
	keyb->assignment[18] = 1;
	keyb->assignment[19] = 21;
	keyb->assignment[20] = 0;
	keyb->assignment[21] = 17;
	keyb->assignment[22] = 27;
	keyb->assignment[23] = 28;
	keyb->assignment[24] = 18;
	keyb->assignment[25] = 20;
	keyb->assignment[26] = 8;
	keyb->assignment[27] = 33;
	keyb->assignment[28] = 34;
	keyb->assignment[29] = 35;
	keyb->assignment[30] = 36;
	keyb->assignment[31] = 37;

//transladado

	// keyb->grid[1] = 20;
	// keyb->grid[2] = 18;
	// keyb->grid[3] = 13;
	// keyb->grid[4] = 8;
	// keyb->grid[5] = 5;
	// keyb->grid[6] = 7;
	// keyb->grid[7] = 10;
	// keyb->grid[8] = 9;
	// keyb->grid[9] = 26;
	// keyb->grid[11] = 2;
	// keyb->grid[12] = 3;
	// keyb->grid[13] = 4;
	// keyb->grid[14] = 1;
	// keyb->grid[15] = 11;
	// keyb->grid[16] = 6;
	// keyb->grid[17] = 16;
	// keyb->grid[18] = 21;
	// keyb->grid[19] = 24;
	// keyb->grid[21] = 25;
	// keyb->grid[22] = 19;
	// keyb->grid[23] = 14;
	// keyb->grid[24] = 15;
	// keyb->grid[25] = 0;
	// keyb->grid[26] = 12;
	// keyb->grid[27] = 17;
	// keyb->grid[28] = 22;
	// keyb->grid[29] = 23;
	// keyb->grid[33] = 27;
	// keyb->grid[34] = 28;
	// keyb->grid[35] = 29;
	// keyb->grid[36] = 30;
	// keyb->grid[37] = 31;

	// keyb->assignment[0] = 25;
	// keyb->assignment[1] = 14;
	// keyb->assignment[2] = 11;
	// keyb->assignment[3] = 12;
	// keyb->assignment[4] = 13;
	// keyb->assignment[5] = 5;
	// keyb->assignment[6] = 16;
	// keyb->assignment[7] = 6;
	// keyb->assignment[8] = 4;
	// keyb->assignment[9] = 8;
	// keyb->assignment[10] = 7;
	// keyb->assignment[11] = 15;
	// keyb->assignment[12] = 26;
	// keyb->assignment[13] = 3;
	// keyb->assignment[14] = 23;
	// keyb->assignment[15] = 24;
	// keyb->assignment[16] = 17;
	// keyb->assignment[17] = 27;
	// keyb->assignment[18] = 2;
	// keyb->assignment[19] = 22;
	// keyb->assignment[20] = 1;
	// keyb->assignment[21] = 18;
	// keyb->assignment[22] = 28;
	// keyb->assignment[23] = 29;
	// keyb->assignment[24] = 19;
	// keyb->assignment[25] = 21;
	// keyb->assignment[26] = 9;
	// keyb->assignment[27] = 33;
	// keyb->assignment[28] = 34;
	// keyb->assignment[29] = 35;
	// keyb->assignment[30] = 36;
	// keyb->assignment[31] = 37;

	//  	cout << "\n0." << endl;
	//  	getchar();

	// long long bestSp;

	// for (int i = 0; i < 33; i++){
	// 	bestSp = numeric_limits<long long>::max();
	// 	for (int j = 33; j < 38; j++){

	// 		if(data->b_matrix[i][j] < bestSp){
	// 			bestSp = data->b_matrix[i][j];
	// 			sp = j;
	// 		}
	// 	}
	// 	switch(sp){
	// 		case 33:
	// 			v1.push_back(i);
	// 			break;

	// 		case 34:
	// 			v2.push_back(i);
	// 			break;

	// 		case 35:
	// 			v3.push_back(i);
	// 			break;
			
	// 		case 36:
	// 			v4.push_back(i);
	// 			break;

	// 		case 37:
	// 			v5.push_back(i);
	// 			break;
	// 	}
	// }
	// cout << "\n1." << endl;
	// getchar();

	// cout << "\nv1: ";
	// for (int i = 0; i < v1.size(); i++){
	// 	cout << v1[i] << " ";
	// }
	// cout << endl;
	
	// cout << "\nv2: ";
	// for (int i = 0; i < v2.size(); i++){
	// 	cout << v2[i] << " ";
	// }
	// cout << endl;	
	
	// cout << "\nv3: ";
	// for (int i = 0; i < v3.size(); i++){
	// 	cout << v3[i] << " ";
	// }
	// cout << endl;	
	
	// cout << "\nv4: ";
	// for (int i = 0; i < v4.size(); i++){
	// 	cout << v4[i] << " ";
	// }
	// cout << endl;
	
	// cout << "\nv5: ";
	// for (int i = 0; i < v5.size(); i++){
	// 	cout << v5[i] << " ";
	// }
	// cout << endl;

	int count = 0;
	
	for (int i = 0; i < keyb->krows; i++){
		for (int j = 0; j < keyb->kcols; j++){
			if (i == 0 && j == 0){
				cout << " ";
			}
			if (i == 1 && j == 0){
				cout << " ";
			}
			if (keyb->grid[count] != -1)
				cout << setw(3) << data->char_list[keyb->grid[count]];
			else
				cout<< setw(3) << "*";
			count++;
		}
		cout << endl;
	}
}

void hybFr (Gendata *data, Keyboard *keyb){
//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
//D E L A ' T S N U Q  I  P  R  O  C  X  V  M  Y  F  B  G  H  J  W  Z  K  _  _  _  _  _
	
	keyb->kcols = 10;
	keyb->krows = 4;

	keyb->grid = new int [keyb->ksize];

	for (int i = 0; i < keyb->ksize; i++){
		keyb->grid[i] = -1;
	}
	
	keyb->assignment = new int [data->size];

	for (int i = 0; i < data->size; i++){
		keyb->assignment[i] = -1;
	}

	// keyb->grid[0] = 23;
	// keyb->grid[1] = 4;
	// keyb->grid[2] = 0;
	// keyb->grid[3] = 6;
	// keyb->grid[4] = 7;
	// keyb->grid[5] = 13;
	// keyb->grid[6] = 14;
	// keyb->grid[7] = 22;
	// keyb->grid[8] = 25;
	// keyb->grid[10] = 15;
	// keyb->grid[11] = 9;
	// keyb->grid[12] = 8;
	// keyb->grid[13] = 1;
	// keyb->grid[14] = 5;
	// keyb->grid[15] = 10;
	// keyb->grid[16] = 17;
	// keyb->grid[17] = 19;
	// keyb->grid[18] = 26;
	// keyb->grid[21] = 20;
	// keyb->grid[22] = 16;
	// keyb->grid[23] = 2;
	// keyb->grid[24] = 12;
	// keyb->grid[25] = 3;
	// keyb->grid[26] = 11;
	// keyb->grid[27] = 21;
	// keyb->grid[28] = 18;
	// keyb->grid[29] = 24;
	// keyb->grid[33] = 27;
	// keyb->grid[34] = 28;
	// keyb->grid[35] = 29;
	// keyb->grid[36] = 30;
	// keyb->grid[37] = 31;

	// keyb->assignment[0] = 2;
	// keyb->assignment[1] = 13;
	// keyb->assignment[2] = 23;
	// keyb->assignment[3] = 25;
	// keyb->assignment[4] = 1;
	// keyb->assignment[5] = 14;
	// keyb->assignment[6] = 3;
	// keyb->assignment[7] = 4;
	// keyb->assignment[8] = 12;
	// keyb->assignment[9] = 11;
	// keyb->assignment[10] = 15;
	// keyb->assignment[11] = 26;
	// keyb->assignment[12] = 24;
	// keyb->assignment[13] = 5;
	// keyb->assignment[14] = 6;
	// keyb->assignment[15] = 10;
	// keyb->assignment[16] = 22;
	// keyb->assignment[17] = 16;
	// keyb->assignment[18] = 28;
	// keyb->assignment[19] = 17;
	// keyb->assignment[20] = 21;
	// keyb->assignment[21] = 27;
	// keyb->assignment[22] = 7;
	// keyb->assignment[23] = 0;
	// keyb->assignment[24] = 29;
	// keyb->assignment[25] = 8;
	// keyb->assignment[26] = 18;
	// keyb->assignment[27] = 33;
	// keyb->assignment[28] = 34;
	// keyb->assignment[29] = 35;
	// keyb->assignment[30] = 36;
	// keyb->assignment[31] = 37;
//mirrored
	
	keyb->grid[1] = 25;
	keyb->grid[2] = 22;
	keyb->grid[3] = 14;
	keyb->grid[4] = 13;
	keyb->grid[5] = 7;
	keyb->grid[6] = 6;
	keyb->grid[7] = 0;
	keyb->grid[8] = 4;
	keyb->grid[9] = 23;
	keyb->grid[11] = 26;
	keyb->grid[12] = 19;
	keyb->grid[13] = 17;
	keyb->grid[14] = 10;
	keyb->grid[15] = 5;
	keyb->grid[16] = 1;
	keyb->grid[17] = 8;
	keyb->grid[18] = 9;
	keyb->grid[19] = 15;
	keyb->grid[21] = 24;
	keyb->grid[22] = 18;
	keyb->grid[23] = 21;
	keyb->grid[24] = 11;
	keyb->grid[25] = 3;
	keyb->grid[26] = 12;
	keyb->grid[27] = 2;
	keyb->grid[28] = 16;
	keyb->grid[29] = 20;
	keyb->grid[33] = 27;
	keyb->grid[34] = 28;
	keyb->grid[35] = 29;
	keyb->grid[36] = 30;
	keyb->grid[37] = 31;

	keyb->assignment[0] = 7;
	keyb->assignment[1] = 16;
	keyb->assignment[2] = 27;
	keyb->assignment[3] = 25;
	keyb->assignment[4] = 8;
	keyb->assignment[5] = 15;
	keyb->assignment[6] = 6;
	keyb->assignment[7] = 5;
	keyb->assignment[8] = 17;
	keyb->assignment[9] = 18;
	keyb->assignment[10] = 14;
	keyb->assignment[11] = 24;
	keyb->assignment[12] = 26;
	keyb->assignment[13] = 4;
	keyb->assignment[14] = 3;
	keyb->assignment[15] = 19;
	keyb->assignment[16] = 28;
	keyb->assignment[17] = 13;
	keyb->assignment[18] = 22;
	keyb->assignment[19] = 12;
	keyb->assignment[20] = 29;
	keyb->assignment[21] = 23;
	keyb->assignment[22] = 2;
	keyb->assignment[23] = 9;
	keyb->assignment[24] = 21;
	keyb->assignment[25] = 1;
	keyb->assignment[26] = 11;
	keyb->assignment[27] = 33;
	keyb->assignment[28] = 34;
	keyb->assignment[29] = 35;
	keyb->assignment[30] = 36;
	keyb->assignment[31] = 37;

	int count = 0;
	
	for (int i = 0; i < keyb->krows; i++){
		for (int j = 0; j < keyb->kcols; j++){
			if (i == 0 && j == 0){
				cout << " ";
			}
			if (i == 1 && j == 0){
				cout << " ";
			}
			if (keyb->grid[count] != -1)
				cout << setw(3) << data->char_list[keyb->grid[count]];
			else
				cout<< setw(3) << "*";
			count++;
		}
		cout << endl;
	}
}

long long qwertyItCalc (Gendata *data, Keyboard *keyb){

	long long costc = 0;
	int pos = 0;
	int next = 0;
	int sPos;
	int currCol;

	long long minSCost;
	long long currCost;

	for (int i = 0; i < data->size - 5; i++){

		pos = keyb->assignment[i];

		for (int j = 0; j < data->size - 5; j++){
			if (j != i){
				//cout << "i: " << data->char_list[i] << " j: " << data->char_list[j] << endl;
				next = keyb->assignment[j];

				costc += ( data->freq_matrix[i][j] * data->b_matrix[pos][next]);
			}
		}//for 'j'		
	}// for 'i'

	costc = costc / 2;

	for (int i = 0; i < data->size - 5; i++){

		pos = keyb->assignment[i];

		switch (pos % keyb->kcols){
			case 0:
				next = keyb->assignment[26];
				costc += ( data->freq_matrix[i][26] * data->b_matrix[pos][next]);
				//cout << "\ni: " << data->char_list[i] << " j: " << data->char_list[26] << " freq: " << data->freq_matrix[i][26] << " mat: " << data->b_matrix[pos][next] <<  endl;
				break;
			case 1:
				next = keyb->assignment[26];
				costc += ( data->freq_matrix[i][26] * data->b_matrix[pos][next]);
				//cout << "\ni: " << data->char_list[i] << " j: " << data->char_list[26] << " freq: " << data->freq_matrix[i][26] << " mat: " << data->b_matrix[pos][next] <<  endl;
				break;
			case 2:
				next = keyb->assignment[26];
				costc += ( data->freq_matrix[i][26] * data->b_matrix[pos][next]);
				//cout << "\ni: " << data->char_list[i] << " j: " << data->char_list[26] << " freq: " << data->freq_matrix[i][26] << " mat: " << data->b_matrix[pos][next] <<  endl;
				break;
			case 3:
				next = keyb->assignment[26];
				costc += ( data->freq_matrix[i][26] * data->b_matrix[pos][next]);
				//cout << "\ni: " << data->char_list[i] << " j: " << data->char_list[26] << " freq: " << data->freq_matrix[i][26] << " mat: " << data->b_matrix[pos][next] <<  endl;
				break;
			case 4:
				next = keyb->assignment[27];
				costc += ( data->freq_matrix[i][27] * data->b_matrix[pos][next]);
				//cout << "\ni: " << data->char_list[i] << " j: " << data->char_list[27] << " freq: " << data->freq_matrix[i][27] << " mat: " << data->b_matrix[pos][next] <<  endl;
				break;
			case 5:
				next = keyb->assignment[28];
				costc += ( data->freq_matrix[i][28] * data->b_matrix[pos][next]);
				//cout << "\ni: " << data->char_list[i] << " j: " << data->char_list[28] << " freq: " << data->freq_matrix[i][28] << " mat: " << data->b_matrix[pos][next] <<  endl;
				break;
			case 6:
				next = keyb->assignment[29];
				costc += ( data->freq_matrix[i][29] * data->b_matrix[pos][next]);
				//cout << "\ni: " << data->char_list[i] << " j: " << data->char_list[29] << " freq: " << data->freq_matrix[i][29] << " mat: " << data->b_matrix[pos][next] <<  endl;
				break;
			case 7:
				next = keyb->assignment[30];
				costc += ( data->freq_matrix[i][30] * data->b_matrix[pos][next]);
				//cout << "\ni: " << data->char_list[i] << " j: " << data->char_list[29] << " freq: " << data->freq_matrix[i][29] << " mat: " << data->b_matrix[pos][next] <<  endl;
				break;
			case 8:
				next = keyb->assignment[30];
				costc += ( data->freq_matrix[i][30] * data->b_matrix[pos][next]);
				//cout << "\ni: " << data->char_list[i] << " j: " << data->char_list[29] << " freq: " << data->freq_matrix[i][29] << " mat: " << data->b_matrix[pos][next] <<  endl;
				break;
			case 9:
				next = keyb->assignment[30];
				costc += ( data->freq_matrix[i][30] * data->b_matrix[pos][next]);
				//cout << "\ni: " << data->char_list[i] << " j: " << data->char_list[29] << " freq: " << data->freq_matrix[i][29] << " mat: " << data->b_matrix[pos][next] <<  endl;
				break;
		}
	}// for 'i'

	return costc;
}


void optAssign (Gendata *data, Keyboard *keyb){
	
	keyb->kcols = 14;
	keyb->krows = 10;

	keyb->grid = new int [keyb->ksize];

	for (int i = 0; i < keyb->ksize; i++){
		keyb->grid[i] = -1;
	}
	
	keyb->assignment = new int [data->size];

	for (int i = 0; i < data->size; i++){
		keyb->assignment[i] = -1;
	}

	keyb->grid[1] = 22;
	keyb->grid[2] = 4;
	keyb->grid[3] = 9;
	keyb->grid[4] = 14;
	keyb->grid[5] = 24;
	keyb->grid[14] = 23;
	keyb->grid[15] = 13;
	keyb->grid[16] = 3;
	keyb->grid[17] = 0;
	keyb->grid[18] = 1;
	keyb->grid[19] = 15;
	keyb->grid[29] = 17;
	keyb->grid[30] = 10;
	keyb->grid[31] = 26;
	keyb->grid[32] = 2;
	keyb->grid[33] = 11;
	keyb->grid[34] = 20;
	keyb->grid[43] = 19;
	keyb->grid[44] = 8;
	keyb->grid[45] = 6;
	keyb->grid[46] = 5;
	keyb->grid[47] = 12;
	keyb->grid[57] = 25;
	keyb->grid[58] = 21;
	keyb->grid[59] = 7;
	keyb->grid[60] = 18;
	keyb->grid[61] = 16;

	keyb->assignment[0] = 17;
	keyb->assignment[1] = 18;
	keyb->assignment[2] = 32;
	keyb->assignment[3] = 16;
	keyb->assignment[4] = 2;
	keyb->assignment[5] = 46;
	keyb->assignment[6] = 45;
	keyb->assignment[7] = 59;
	keyb->assignment[8] = 44;
	keyb->assignment[9] = 3;
	keyb->assignment[10] = 30;
	keyb->assignment[11] = 33;
	keyb->assignment[12] = 47;
	keyb->assignment[13] = 15;
	keyb->assignment[14] = 4;
	keyb->assignment[15] = 19;
	keyb->assignment[16] = 61;
	keyb->assignment[17] = 29;
	keyb->assignment[18] = 60;
	keyb->assignment[19] = 43;
	keyb->assignment[20] = 34;
	keyb->assignment[21] = 58;
	keyb->assignment[22] = 1;
	keyb->assignment[23] = 14;
	keyb->assignment[24] = 5;
	keyb->assignment[25] = 57;
	keyb->assignment[26] = 31;

	int count = 0;
	
	for (int i = 0; i < keyb->krows; i++){
		for (int j = 0; j < keyb->kcols; j++){
			if (keyb->grid[count] != -1)
				cout << setw(3) << data->char_list[keyb->grid[count]];
			else
				cout<< setw(3) << "*";
			count++;
		}
		cout << endl;
	}

	long long costc = 0;
	int pos = 0;
	int next = 0;
	int currCol;

	long long currCost;

	for (int i = 0; i < data->size; i++){

		pos = keyb->assignment[i];

		for (int j = 0; j < data->size; j++){
			if (j != i){
				//cout << "i: " << data->char_list[i] << " j: " << data->char_list[j] << endl;
				next = keyb->assignment[j];

				costc += ( data->freq_matrix[i][j] * data->b_matrix[pos][next]);
			}
		}//for 'j'		
	}// for 'i'

	costc = costc / 2;
	cout << "\nOpt Cost: " << costc << endl;
}
// void newItInst(Gendata *data, Keyboard *keyb){

// 	//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33
// 	//E C H I L A N U è P R  O  D  '  S  ù  M  G  Q  T  é  V  ì  F  Z  ò  à  B  X  W  Y  K  J  ø 

// 	//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
// 	//E C H I L A N U P R  O  D  S  M  G  Q  T  V  F  Z  B  X  W  Y  K  J  _ 

// 	vector<int> vec1 = {0, 3, 5, 7, 8, 11, 15, 20, 22, 25, 26};

// 	//0 + 8 + 20
// 	//3 + 22
// 	//5 + 26
// 	//7 + 15
// 	//11 + 25

// 	long long fmat [data->size][data->size] = {0};

// 	for (int i = 0; i < data->size; i++){
// 		for (int j = 0; j < data->size; j++){
// 			fmat[i][j] = data->freq_matrix[i][j];
// 		}
// 	}

// 	//cout << "\nTeste: " << fmat[12][22] << endl;

// 	for (int i = 0; i < data->size; i++){
// 		for (int j = 0; j < data->size; j++){
// 			if(i == 0){
// 				fmat[0][j] = data->freq_matrix[0][j] + data->freq_matrix[8][j] + data->freq_matrix[20][j];
// 				fmat[j][0] = data->freq_matrix[j][0] + data->freq_matrix[j][8] + data->freq_matrix[j][20];
// 				//cout << j << ": " << fmat[0][j] << endl;
// 			}
// 			else if(i == 3){
// 				fmat[3][j] = data->freq_matrix[3][j] + data->freq_matrix[22][j];
// 				fmat[j][3] = data->freq_matrix[j][3] + data->freq_matrix[j][22];
// 			}
// 			else if(i == 5){
// 				fmat[5][j] = data->freq_matrix[5][j] + data->freq_matrix[26][j];
// 				fmat[j][5] = data->freq_matrix[j][5] + data->freq_matrix[j][26];
// 			}
// 			else if(i == 7){
// 				fmat[7][j] = data->freq_matrix[7][j] + data->freq_matrix[15][j];
// 				fmat[j][7] = data->freq_matrix[j][7] + data->freq_matrix[j][15];
// 			}
// 			else if(i == 11){
// 				fmat[11][j] = data->freq_matrix[11][j] + data->freq_matrix[25][j];
// 				fmat[j][11] = data->freq_matrix[j][11] + data->freq_matrix[j][25];
// 			}
// 			else{
// 				continue;
// 			}
// 		}
// 	}

// 	cout << "n = " << 27 << endl;

// 	for(int i = 0; i < data->size; i++){
// 		if (i == 8 || i == 13 || i == 15 || i == 20 || i == 22 || i == 25 || i == 26){
// 			continue;
// 		}
// 		else{
// 			for(int j = 0; j < data->size; j++){
// 				if (i == j){
// 					fmat[i][j] = 0;
// 				}
// 				if (j == 8 || j == 13 || j == 15 || j == 20 || j == 22 || j == 25 || j == 26){
// 					continue;
// 				}
// 				else{
// 					cout << setw(6) << std::right << fmat[i][j] << " ";
// 				}
// 			}
// 			cout << endl;
// 		}

// 	}
// }

// void newFrInst(Gendata *data, Keyboard *keyb){

// 	//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
// 	//D E L A ' T S à N U  Q  I  P  R  O  C  X  V  M  Y  ê  é  F  ù  B  G  è  H  J  ç  ô  ë  W  Z  â  K  û  î  ï  ä  ø 

// 	//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
// 	//D E L A ' T S N U Q  I  P  R  O  C  X  V  M  Y  F  B  G  H  J  W  Z  K  ø

// 	//1 + 20 + 21 + 26 + 31
// 	//3 + 7 + 34 + 39 
// 	//9 + 23 + 36
// 	//11 + 37 + 38
// 	//14 + 30
// 	//15 + 29

// 	long long fmat [data->size][data->size] = {0};

// 	for (int i = 0; i < data->size; i++){
// 		for (int j = 0; j < data->size; j++){
// 			fmat[i][j] = data->freq_matrix[i][j];
// 		}
// 	}

// 	for (int i = 0; i < data->size; i++){
// 		for (int j = 0; j < data->size; j++){
// 			if(i == 1){
// 				fmat[1][j] = data->freq_matrix[1][j] + data->freq_matrix[20][j] + data->freq_matrix[21][j] + data->freq_matrix[26][j] + data->freq_matrix[31][j];
// 				fmat[j][1] = data->freq_matrix[j][1] + data->freq_matrix[j][20] + data->freq_matrix[j][21] + data->freq_matrix[j][26] + data->freq_matrix[j][31];
// 				//cout << j << ": " << fmat[0][j] << endl;
// 			}
// 			else if(i == 3){
// 				fmat[3][j] = data->freq_matrix[3][j] + data->freq_matrix[7][j] + data->freq_matrix[34][j] + data->freq_matrix[39][j];
// 				fmat[j][3] = data->freq_matrix[j][3] + data->freq_matrix[j][7] + data->freq_matrix[j][34] + data->freq_matrix[j][39];
// 			}
// 			else if(i == 9){
// 				fmat[9][j] = data->freq_matrix[9][j] + data->freq_matrix[23][j] + data->freq_matrix[36][j];
// 				fmat[j][9] = data->freq_matrix[j][9] + data->freq_matrix[j][23] + data->freq_matrix[j][36];
// 			}
// 			else if(i == 11){
// 				fmat[11][j] = data->freq_matrix[11][j] + data->freq_matrix[37][j] + data->freq_matrix[38][j];
// 				fmat[j][11] = data->freq_matrix[j][11] + data->freq_matrix[j][37] + data->freq_matrix[j][38];
// 			}
// 			else if(i == 14){
// 				fmat[14][j] = data->freq_matrix[14][j] + data->freq_matrix[30][j];
// 				fmat[j][14] = data->freq_matrix[j][14] + data->freq_matrix[j][30];
// 			}
// 			else if(i == 15){
// 				fmat[15][j] = data->freq_matrix[15][j] + data->freq_matrix[29][j];
// 				fmat[j][15] = data->freq_matrix[j][15] + data->freq_matrix[j][29];
// 			}
// 			else{
// 				continue;
// 			}
// 		}
// 	}

// 	cout << "n = " << 28 << endl;

// 	for(int i = 0; i < data->size; i++){
// 		if (i == 7 || i == 20 || i == 21 || i == 23 || i == 26 || i == 29 || i == 30 || i == 31 || i == 34 || i == 36 || i == 37 || i == 38 || i == 39){
// 			continue;
// 		}
// 		else{
// 			for(int j = 0; j < data->size; j++){
// 				if (i == j){
// 					fmat[i][j] = 0;
// 				}
// 				if (j == 7 || j == 20 || j == 21 || j == 23 || j == 26 || j == 29 || j == 30 || j == 31 || j == 34 || j == 36 || j == 37 || j == 38 || j == 39){
// 					continue;
// 				}
// 				else{
// 					cout << setw(7) << std::right << fmat[i][j] << " ";
// 				}
// 			}
// 			cout << endl;
// 		}

// 	}
// }

// void newSpInst(Gendata *data, Keyboard *keyb){

// 	//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 
// 	//D E Q U N O A L S Y  P  R  M  e  T  C  I  a  i  H  B  G  o  V  u  F  Z  J  n  K  X  W  w  _  

// 	//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
// 	//D E Q U N O A L S Y  P  R  M  T  C  I  H  B  G  V  F  Z  J  ñ  K  X  W  _

// 	//1 + 13
// 	//3 + 24 + 32
// 	//5 + 17
// 	//6 + 22
// 	//16 + 18

// 	long long fmat [data->size][data->size] = {0};

// 	for (int i = 0; i < data->size; i++){
// 		for (int j = 0; j < data->size; j++){
// 			fmat[i][j] = data->freq_matrix[i][j];
// 		}
// 	}

// 	for (int i = 0; i < data->size; i++){
// 		for (int j = 0; j < data->size; j++){
// 			if(i == 1){
// 				fmat[1][j] = data->freq_matrix[1][j] + data->freq_matrix[13][j];
// 				fmat[j][1] = data->freq_matrix[j][1] + data->freq_matrix[j][13];
// 			}
// 			else if(i == 3){
// 				fmat[3][j] = data->freq_matrix[3][j] + data->freq_matrix[24][j] + data->freq_matrix[32][j];
// 				fmat[j][3] = data->freq_matrix[j][3] + data->freq_matrix[j][24] + data->freq_matrix[j][32];
// 			}
// 			else if(i == 5){
// 				fmat[5][j] = data->freq_matrix[5][j] + data->freq_matrix[17][j];
// 				fmat[j][5] = data->freq_matrix[j][5] + data->freq_matrix[j][17];
// 			}
// 			else if(i == 6){
// 				fmat[6][j] = data->freq_matrix[6][j] + data->freq_matrix[22][j];
// 				fmat[j][6] = data->freq_matrix[j][6] + data->freq_matrix[j][22];
// 			}
// 			else if(i == 16){
// 				fmat[16][j] = data->freq_matrix[16][j] + data->freq_matrix[18][j];
// 				fmat[j][16] = data->freq_matrix[j][16] + data->freq_matrix[j][18];
// 			}
// 			else{
// 				continue;
// 			}
// 		}
// 	}

// 	cout << "n = " << 28 << endl;

// 	for(int i = 0; i < data->size; i++){
// 		if (i == 13 || i == 17 || i == 18 || i == 22 || i == 24 || i == 32){
// 			continue;
// 		}
// 		else{
// 			for(int j = 0; j < data->size; j++){
// 				if (i == j){
// 					fmat[i][j] = 0;
// 				}
// 				if (j == 13 || j == 17 || j == 18 || j == 22 || j == 24 || j == 32){
// 					continue;
// 				}
// 				else{
// 					cout << setw(6) << std::right << fmat[i][j] << " ";
// 				}
// 			}
// 			cout << endl;
// 		}

// 	}
// }

// void newPtInst(Gendata *data, Keyboard *keyb){

// 	//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
// 	//E A O S R I D N T M  C  U  P  L  V  F  Ã  G  B  Q  Ç  H  É  Á  Í  Z  J  X  Ê  Ó  Õ  Ú  À  W  -  Â  Y  K  Ô  _

// 	//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
// 	//E A O S R I D N T M  C  U  P  L  V  F  G  B  Q  H  Z  J  X  W  Y  K  _

// 	//0 + 22 + 28
// 	//1 + 16 + 23 + 32 + 35
// 	//2 + 29 + 30 + 38
// 	//5 + 24
// 	//10 + 20
// 	//11 + 31

// 	long long fmat [data->size][data->size] = {0};

// 	for (int i = 0; i < data->size; i++){
// 		for (int j = 0; j < data->size; j++){
// 			fmat[i][j] = data->freq_matrix[i][j];
// 		}
// 	}

// 	for (int i = 0; i < data->size; i++){
// 		for (int j = 0; j < data->size; j++){
// 			if(i == 0){
// 				fmat[0][j] = data->freq_matrix[0][j] + data->freq_matrix[22][j] + data->freq_matrix[28][j];
// 				fmat[j][0] = data->freq_matrix[j][0] + data->freq_matrix[j][22] + data->freq_matrix[j][28];
// 			}
// 			else if(i == 1){
// 				fmat[1][j] = data->freq_matrix[1][j] + data->freq_matrix[16][j] + data->freq_matrix[23][j] + data->freq_matrix[32][j] + data->freq_matrix[35][j];
// 				fmat[j][1] = data->freq_matrix[j][1] + data->freq_matrix[j][16] + data->freq_matrix[j][23] + data->freq_matrix[j][32] + data->freq_matrix[j][35];
// 			}
// 			else if(i == 2){
// 				fmat[2][j] = data->freq_matrix[2][j] + data->freq_matrix[29][j] + data->freq_matrix[30][j] + data->freq_matrix[38][j];
// 				fmat[j][2] = data->freq_matrix[j][2] + data->freq_matrix[j][29] + data->freq_matrix[j][30] + data->freq_matrix[j][38];
// 			}
// 			else if(i == 5){
// 				fmat[5][j] = data->freq_matrix[5][j] + data->freq_matrix[24][j];
// 				fmat[j][5] = data->freq_matrix[j][5] + data->freq_matrix[j][24];
// 			}
// 			else if(i == 10){
// 				fmat[10][j] = data->freq_matrix[10][j] + data->freq_matrix[20][j];
// 				fmat[j][10] = data->freq_matrix[j][10] + data->freq_matrix[j][20];
// 			}
// 			else if(i == 11){
// 				fmat[11][j] = data->freq_matrix[11][j] + data->freq_matrix[31][j];
// 				fmat[j][11] = data->freq_matrix[j][11] + data->freq_matrix[j][31];
// 			}
// 			else{
// 				continue;
// 			}
// 		}
// 	}

// 	cout << "n = " << 27 << endl;

// 	for(int i = 0; i < data->size; i++){
// 		if (i == 16 || i == 20 || i == 22 || i == 23 || i == 24 || i == 28 || i == 29 || i == 30 || i == 31 || i == 32 || i == 34 || i == 35 || i == 38){
// 			continue;
// 		}
// 		else{
// 			for(int j = 0; j < data->size; j++){
// 				if (i == j){
// 					fmat[i][j] = 0;
// 				}
// 				if (j == 16 || j == 20 || j == 22 || j == 23 || j == 24 || j == 28 || j == 29 || j == 30 || j == 31 || j == 32 || j == 34 || j == 35 || j == 38){
// 					continue;
// 				}
// 				else{
// 					cout << setw(9) << std::right << fmat[i][j] << " ";
// 				}
// 			}
// 			cout << endl;
// 		}

// 	}
// }

void hybENFR (Gendata *data, Keyboard *keyb){

//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
//T H E O F A N D I W S  R  Y  U  B  C  V  M  L  P  K  G  J  Q  X  '  Z  _  _  _  _  _ 
	
	keyb->kcols = 10;
	keyb->krows = 4;

	keyb->grid = new int [keyb->ksize];

	for (int i = 0; i < keyb->ksize; i++){
		keyb->grid[i] = -1;
	}
	
	keyb->assignment = new int [data->size];

	for (int i = 0; i < data->size; i++){
		keyb->assignment[i] = -1;
	}

//   *  X  Q  U  S  N  O  C  H  W
//   *  J  V  D  E  T  I  M  F  K
//   *  Z  B  '  L  R  A  P  G  Y
//	 *  *  *  _  _  _  _  _  *  *

// -----x-----
// Best Global Solution Cost: 9537192051

	keyb->grid[1] = 24;
	keyb->grid[2] = 23;
	keyb->grid[3] = 13;
	keyb->grid[4] = 10;
	keyb->grid[5] = 6;
	keyb->grid[6] = 3;
	keyb->grid[7] = 15;
	keyb->grid[8] = 1;
	keyb->grid[9] = 9;
	keyb->grid[11] = 22;
	keyb->grid[12] = 16;
	keyb->grid[13] = 7;
	keyb->grid[14] = 2;
	keyb->grid[15] = 0;
	keyb->grid[16] = 8;
	keyb->grid[17] = 17;
	keyb->grid[18] = 4;
	keyb->grid[19] = 20;
	keyb->grid[21] = 26;
	keyb->grid[22] = 14;
	keyb->grid[23] = 25;
	keyb->grid[24] = 18;
	keyb->grid[25] = 11;
	keyb->grid[26] = 5;
	keyb->grid[27] = 19;
	keyb->grid[28] = 21;
	keyb->grid[29] = 12;
	keyb->grid[33] = 27;
	keyb->grid[34] = 28;
	keyb->grid[35] = 29;
	keyb->grid[36] = 30;
	keyb->grid[37] = 31;

	keyb->assignment[0] = 15;
	keyb->assignment[1] = 8;
	keyb->assignment[2] = 14;
	keyb->assignment[3] = 6;
	keyb->assignment[4] = 18;
	keyb->assignment[5] = 26;
	keyb->assignment[6] = 5;
	keyb->assignment[7] = 13;
	keyb->assignment[8] = 16;
	keyb->assignment[9] = 9;
	keyb->assignment[10] = 4;
	keyb->assignment[11] = 25;
	keyb->assignment[12] = 29;
	keyb->assignment[13] = 3;
	keyb->assignment[14] = 22;
	keyb->assignment[15] = 7;
	keyb->assignment[16] = 12;
	keyb->assignment[17] = 17;
	keyb->assignment[18] = 24;
	keyb->assignment[19] = 27;
	keyb->assignment[20] = 19;
	keyb->assignment[21] = 28;
	keyb->assignment[22] = 11;
	keyb->assignment[23] = 2;
	keyb->assignment[24] = 1;
	keyb->assignment[25] = 23;
	keyb->assignment[26] = 21;
	keyb->assignment[27] = 33;
	keyb->assignment[28] = 34;
	keyb->assignment[29] = 35;
	keyb->assignment[30] = 36;
	keyb->assignment[31] = 37;

	int count = 0;
	
	for (int i = 0; i < keyb->krows; i++){
		for (int j = 0; j < keyb->kcols; j++){
			if (i == 0 && j == 0){
				cout << " ";
			}
			if (i == 1 && j == 0){
				cout << " ";
			}
			if (keyb->grid[count] != -1)
				cout << setw(3) << data->char_list[keyb->grid[count]];
			else
				cout<< setw(3) << "*";
			count++;
		}
		cout << endl;
	}
}



void hybENSP(Gendata *data, Keyboard *keyb)
{

//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
//T H E O F A N D I W  S  R  Y  U  B  C  V  M  L  P  K  G  J  Q  X  Z  Ñ  _  _  _  _  _  
	
	keyb->kcols = 10;
	keyb->krows = 4;

	keyb->grid = new int [keyb->ksize];

	for (int i = 0; i < keyb->ksize; i++){
		keyb->grid[i] = -1;
	}
	
	keyb->assignment = new int [data->size];

	for (int i = 0; i < data->size; i++){
		keyb->assignment[i] = -1;
	}

// *  Y  B  L  A  N  D  G  K  *
// Ñ  Q  U  M  R  E  I  C  V  Z
// *  J  F  P  O  S  T  H  W  X
// *  *  *  _  _  _  _  _  *  *

// -----x-----
// Best Global Solution Cost: 1522921294

	keyb->grid[1] = 12;
	keyb->grid[2] = 14;
	keyb->grid[3] = 18;
	keyb->grid[4] = 5;
	keyb->grid[5] = 6;
	keyb->grid[6] = 7;
	keyb->grid[7] = 21;
	keyb->grid[8] = 20;
	keyb->grid[10] = 26;
	keyb->grid[11] = 23;
	keyb->grid[12] = 13;
	keyb->grid[13] = 17;
	keyb->grid[14] = 11;
	keyb->grid[15] = 2;
	keyb->grid[16] = 8;
	keyb->grid[17] = 15;
	keyb->grid[18] = 16;
	keyb->grid[19] = 25;
	keyb->grid[21] = 22;
	keyb->grid[22] = 4;
	keyb->grid[23] = 19;
	keyb->grid[24] = 3;
	keyb->grid[25] = 10;
	keyb->grid[26] = 0;
	keyb->grid[27] = 1;
	keyb->grid[28] = 9;
	keyb->grid[29] = 24;
	keyb->grid[33] = 27;
	keyb->grid[34] = 28;
	keyb->grid[35] = 29;
	keyb->grid[36] = 30;
	keyb->grid[37] = 31;

	keyb->assignment[0] = 26;
	keyb->assignment[1] = 27;
	keyb->assignment[2] = 15;
	keyb->assignment[3] = 24;
	keyb->assignment[4] = 22;
	keyb->assignment[5] = 4;
	keyb->assignment[6] = 5;
	keyb->assignment[7] = 6;
	keyb->assignment[8] = 16;
	keyb->assignment[9] = 28;
	keyb->assignment[10] = 25;
	keyb->assignment[11] = 14;
	keyb->assignment[12] = 1;
	keyb->assignment[13] = 12;
	keyb->assignment[14] = 2;
	keyb->assignment[15] = 17;
	keyb->assignment[16] = 18;
	keyb->assignment[17] = 13;
	keyb->assignment[18] = 3;
	keyb->assignment[19] = 23;
	keyb->assignment[20] = 8;
	keyb->assignment[21] = 7;
	keyb->assignment[22] = 21;
	keyb->assignment[23] = 11;
	keyb->assignment[24] = 29;
	keyb->assignment[25] = 19;
	keyb->assignment[26] = 10;
	keyb->assignment[27] = 33;
	keyb->assignment[28] = 34;
	keyb->assignment[29] = 35;
	keyb->assignment[30] = 36;
	keyb->assignment[31] = 37;

	int count = 0;
	
	for (int i = 0; i < keyb->krows; i++){
		for (int j = 0; j < keyb->kcols; j++){
			if (i == 0 && j == 0){
				cout << " ";
			}
			if (i == 1 && j == 0){
				cout << " ";
			}
			if (keyb->grid[count] != -1)
				cout << setw(3) << data->char_list[keyb->grid[count]];
			else
				cout<< setw(3) << "*";
			count++;
		}
		cout << endl;
	}

}
void hybENPT(Gendata *data, Keyboard *keyb)
{

//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
//T H E O F A N D I W  S  R  Y  U  B  C  V  M  L  P  K  G  J  Q  X  Z  _  _  _  _  _ 
	
//   *  X  Q  U  T  N  C  V  Z  *
//   *  J  G  M  E  S  A  I  F  W
//   *  K  B  P  R  O  D  L  H  Y
//   *  *  *  _  _  _  _  _  *  *
// -----x-----
// Best Global Solution Cost: 723415379921

	keyb->kcols = 10;
	keyb->krows = 4;

	keyb->grid = new int [keyb->ksize];

	for (int i = 0; i < keyb->ksize; i++){
		keyb->grid[i] = -1;
	}
	
	keyb->assignment = new int [data->size];

	for (int i = 0; i < data->size; i++){
		keyb->assignment[i] = -1;
	}

	keyb->grid[1] = 24;
	keyb->grid[2] = 23;
	keyb->grid[3] = 13;
	keyb->grid[4] = 0;
	keyb->grid[5] = 6;
	keyb->grid[6] = 15;
	keyb->grid[7] = 16;
	keyb->grid[8] = 25;
	keyb->grid[11] = 22;
	keyb->grid[12] = 21;
	keyb->grid[13] = 17;
	keyb->grid[14] = 2;
	keyb->grid[15] = 10;
	keyb->grid[16] = 5;
	keyb->grid[17] = 8;
	keyb->grid[18] = 4;
	keyb->grid[19] = 9;
	keyb->grid[21] = 20;
	keyb->grid[22] = 14;
	keyb->grid[23] = 19;
	keyb->grid[24] = 11;
	keyb->grid[25] = 3;
	keyb->grid[26] = 7;
	keyb->grid[27] = 18;
	keyb->grid[28] = 1;
	keyb->grid[29] = 12;
	keyb->grid[33] = 26;
	keyb->grid[34] = 27;
	keyb->grid[35] = 28;
	keyb->grid[36] = 29;
	keyb->grid[37] = 30;

	keyb->assignment[0] = 4;
	keyb->assignment[1] = 28;
	keyb->assignment[2] = 14;
	keyb->assignment[3] = 25;
	keyb->assignment[4] = 18;
	keyb->assignment[5] = 16;
	keyb->assignment[6] = 5;
	keyb->assignment[7] = 26;
	keyb->assignment[8] = 17;
	keyb->assignment[9] = 19;
	keyb->assignment[10] = 15;
	keyb->assignment[11] = 24;
	keyb->assignment[12] = 29;
	keyb->assignment[13] = 3;
	keyb->assignment[14] = 22;
	keyb->assignment[15] = 6;
	keyb->assignment[16] = 7;
	keyb->assignment[17] = 13;
	keyb->assignment[18] = 27;
	keyb->assignment[19] = 23;
	keyb->assignment[20] = 21;
	keyb->assignment[21] = 12;
	keyb->assignment[22] = 11;
	keyb->assignment[23] = 2;
	keyb->assignment[24] = 1;
	keyb->assignment[25] = 8;
	keyb->assignment[26] = 33;
	keyb->assignment[27] = 34;
	keyb->assignment[28] = 35;
	keyb->assignment[29] = 36;
	keyb->assignment[30] = 37;

	int count = 0;
	
	for (int i = 0; i < keyb->krows; i++){
		for (int j = 0; j < keyb->kcols; j++){
			if (i == 0 && j == 0){
				cout << " ";
			}
			if (keyb->grid[count] != -1)
				cout << setw(3) << data->char_list[keyb->grid[count]];
			else
				cout<< setw(3) << "*";
			count++;
		}
		cout << endl;
	}

}
void hybENIT(Gendata *data, Keyboard *keyb)
{


//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
//T H E O F A N D I W  S  R  Y  U  B  C  V  M  L  P  K  G  J  Q  X  Z  _  _  _  _  _
	
 // *  W  H  C  O  R  P  V  Y  *
 // *  K  F  S  I  N  E  D  G  X
 // *  Q  Z  U  T  A  L  M  B  J
 // *  *  *  _  _  _  _  _  *  *
// -----x-----
// Best Global Solution Cost: 3431856357

	keyb->kcols = 10;
	keyb->krows = 4;

	keyb->grid = new int [keyb->ksize];

	for (int i = 0; i < keyb->ksize; i++){
		keyb->grid[i] = -1;
	}
	
	keyb->assignment = new int [data->size];

	for (int i = 0; i < data->size; i++){
		keyb->assignment[i] = -1;
	}

	keyb->grid[1] = 9;
	keyb->grid[2] = 1;
	keyb->grid[3] = 15;
	keyb->grid[4] = 3;
	keyb->grid[5] = 11;
	keyb->grid[6] = 19;
	keyb->grid[7] = 16;
	keyb->grid[8] = 12;
	keyb->grid[11] = 20;
	keyb->grid[12] = 4;
	keyb->grid[13] = 10;
	keyb->grid[14] = 8;
	keyb->grid[15] = 6;
	keyb->grid[16] = 2;
	keyb->grid[17] = 7;
	keyb->grid[18] = 21;
	keyb->grid[19] = 24;
	keyb->grid[21] = 23;
	keyb->grid[22] = 25;
	keyb->grid[23] = 13;
	keyb->grid[24] = 0;
	keyb->grid[25] = 5;
	keyb->grid[26] = 18;
	keyb->grid[27] = 17;
	keyb->grid[28] = 14;
	keyb->grid[29] = 22;
	keyb->grid[33] = 26;
	keyb->grid[34] = 27;
	keyb->grid[35] = 28;
	keyb->grid[36] = 29;
	keyb->grid[37] = 30;

	keyb->assignment[0] = 24;
	keyb->assignment[1] = 2;
	keyb->assignment[2] = 16;
	keyb->assignment[3] = 4;
	keyb->assignment[4] = 12;
	keyb->assignment[5] = 25;
	keyb->assignment[6] = 15;
	keyb->assignment[7] = 17;
	keyb->assignment[8] = 14;
	keyb->assignment[9] = 1;
	keyb->assignment[10] = 13;
	keyb->assignment[11] = 5;
	keyb->assignment[12] = 8;
	keyb->assignment[13] = 23;
	keyb->assignment[14] = 28;
	keyb->assignment[15] = 3;
	keyb->assignment[16] = 7;
	keyb->assignment[17] = 27;
	keyb->assignment[18] = 26;
	keyb->assignment[19] = 6;
	keyb->assignment[20] = 11;
	keyb->assignment[21] = 18;
	keyb->assignment[22] = 29;
	keyb->assignment[23] = 21;
	keyb->assignment[24] = 19;
	keyb->assignment[25] = 22;
	keyb->assignment[26] = 33;
	keyb->assignment[27] = 34;
	keyb->assignment[28] = 35;
	keyb->assignment[29] = 36;
	keyb->assignment[30] = 37;

	int count = 0;
	
	for (int i = 0; i < keyb->krows; i++){
		for (int j = 0; j < keyb->kcols; j++){
			if (i == 0 && j == 0){
				cout << " ";
			}
			if (keyb->grid[count] != -1)
				cout << setw(3) << data->char_list[keyb->grid[count]];
			else
				cout<< setw(3) << "*";
			count++;
		}
		cout << endl;
	}

}

